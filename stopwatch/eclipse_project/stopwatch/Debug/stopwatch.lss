
stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00002dbe  00002e52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080006c  0080006c  00002e5e  2**0
                  ALLOC
  3 .stab         0000186c  00000000  00000000  00002e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000937  00000000  00000000  000046cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005003  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005163  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000052f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007337  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000093bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000953c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000097fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__vector_1>
       8:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__vector_2>
       c:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 0c 	call	0x191a	; 0x191a <main>
      8a:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <__vector_7>:
unsigned char minutes_increment_button = 0;
unsigned char seconds_decrement_button = 0;
unsigned char seconds_increment_button = 0;

ISR(TIMER1_COMPA_vect)
{
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	8f 93       	push	r24
     caa:	9f 93       	push	r25
     cac:	af 93       	push	r26
     cae:	bf 93       	push	r27
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
	if(mode_toggle == 0)
     cb8:	80 91 72 00 	lds	r24, 0x0072
     cbc:	88 23       	and	r24, r24
     cbe:	a1 f4       	brne	.+40     	; 0xce8 <__vector_7+0x4a>
	{
		/*counting up*/
		time++;
     cc0:	80 91 68 00 	lds	r24, 0x0068
     cc4:	90 91 69 00 	lds	r25, 0x0069
     cc8:	a0 91 6a 00 	lds	r26, 0x006A
     ccc:	b0 91 6b 00 	lds	r27, 0x006B
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	a1 1d       	adc	r26, r1
     cd4:	b1 1d       	adc	r27, r1
     cd6:	80 93 68 00 	sts	0x0068, r24
     cda:	90 93 69 00 	sts	0x0069, r25
     cde:	a0 93 6a 00 	sts	0x006A, r26
     ce2:	b0 93 6b 00 	sts	0x006B, r27
     ce6:	13 c0       	rjmp	.+38     	; 0xd0e <__vector_7+0x70>
	}
	else
	{
		/*counting down*/
		time--;
     ce8:	80 91 68 00 	lds	r24, 0x0068
     cec:	90 91 69 00 	lds	r25, 0x0069
     cf0:	a0 91 6a 00 	lds	r26, 0x006A
     cf4:	b0 91 6b 00 	lds	r27, 0x006B
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	a1 09       	sbc	r26, r1
     cfc:	b1 09       	sbc	r27, r1
     cfe:	80 93 68 00 	sts	0x0068, r24
     d02:	90 93 69 00 	sts	0x0069, r25
     d06:	a0 93 6a 00 	sts	0x006A, r26
     d0a:	b0 93 6b 00 	sts	0x006B, r27
	}
}
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	bf 91       	pop	r27
     d14:	af 91       	pop	r26
     d16:	9f 91       	pop	r25
     d18:	8f 91       	pop	r24
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	0f 90       	pop	r0
     d20:	1f 90       	pop	r1
     d22:	18 95       	reti

00000d24 <__vector_1>:

ISR(INT0_vect)
{
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
	/*reset time*/
	time = 0;
     d36:	10 92 68 00 	sts	0x0068, r1
     d3a:	10 92 69 00 	sts	0x0069, r1
     d3e:	10 92 6a 00 	sts	0x006A, r1
     d42:	10 92 6b 00 	sts	0x006B, r1
}
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <__vector_2>:

ISR(INT1_vect)
{
     d54:	1f 92       	push	r1
     d56:	0f 92       	push	r0
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	0f 92       	push	r0
     d5c:	11 24       	eor	r1, r1
     d5e:	8f 93       	push	r24
     d60:	af 93       	push	r26
     d62:	bf 93       	push	r27
     d64:	ef 93       	push	r30
     d66:	ff 93       	push	r31
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
	/*stopwatch pause*/
	/*stop timer 1 (no clock source)*/
	CLEAR_BIT(TCCR1B, CS10);
     d70:	ae e4       	ldi	r26, 0x4E	; 78
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	ee e4       	ldi	r30, 0x4E	; 78
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8e 7f       	andi	r24, 0xFE	; 254
     d7c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B, CS11);
     d7e:	ae e4       	ldi	r26, 0x4E	; 78
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	ee e4       	ldi	r30, 0x4E	; 78
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8d 7f       	andi	r24, 0xFD	; 253
     d8a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B, CS12);
     d8c:	ae e4       	ldi	r26, 0x4E	; 78
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	ee e4       	ldi	r30, 0x4E	; 78
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	8b 7f       	andi	r24, 0xFB	; 251
     d98:	8c 93       	st	X, r24

	paused = 1;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 73 00 	sts	0x0073, r24
}
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	ff 91       	pop	r31
     da6:	ef 91       	pop	r30
     da8:	bf 91       	pop	r27
     daa:	af 91       	pop	r26
     dac:	8f 91       	pop	r24
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <__vector_3>:

ISR(INT2_vect)
{
     db8:	1f 92       	push	r1
     dba:	0f 92       	push	r0
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	8f 93       	push	r24
     dc4:	af 93       	push	r26
     dc6:	bf 93       	push	r27
     dc8:	ef 93       	push	r30
     dca:	ff 93       	push	r31
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
	/*stopwatch resume*/
	/*reactivate timer 1 (prescaler = 1024)*/
	SET_BIT(TCCR1B, CS10);
     dd4:	ae e4       	ldi	r26, 0x4E	; 78
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	ee e4       	ldi	r30, 0x4E	; 78
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	81 60       	ori	r24, 0x01	; 1
     de0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS12);
     de2:	ae e4       	ldi	r26, 0x4E	; 78
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	ee e4       	ldi	r30, 0x4E	; 78
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	84 60       	ori	r24, 0x04	; 4
     dee:	8c 93       	st	X, r24
}
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	ff 91       	pop	r31
     df6:	ef 91       	pop	r30
     df8:	bf 91       	pop	r27
     dfa:	af 91       	pop	r26
     dfc:	8f 91       	pop	r24
     dfe:	0f 90       	pop	r0
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	0f 90       	pop	r0
     e04:	1f 90       	pop	r1
     e06:	18 95       	reti

00000e08 <timer1_ctc_init>:
void timer1_ctc_init(void)
{
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
	/*set FOC1A, FOC1B, WGM12 to choose the compare mode for timer1*/
	SET_BIT(TCCR1A, FOC1A);
     e10:	af e4       	ldi	r26, 0x4F	; 79
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	ef e4       	ldi	r30, 0x4F	; 79
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	88 60       	ori	r24, 0x08	; 8
     e1c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1B);
     e1e:	af e4       	ldi	r26, 0x4F	; 79
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	ef e4       	ldi	r30, 0x4F	; 79
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	84 60       	ori	r24, 0x04	; 4
     e2a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
     e2c:	ae e4       	ldi	r26, 0x4E	; 78
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	ee e4       	ldi	r30, 0x4E	; 78
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	88 60       	ori	r24, 0x08	; 8
     e38:	8c 93       	st	X, r24

	/*configure the prescaler to 1024*/
	SET_BIT(TCCR1B, CS10);
     e3a:	ae e4       	ldi	r26, 0x4E	; 78
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	ee e4       	ldi	r30, 0x4E	; 78
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	81 60       	ori	r24, 0x01	; 1
     e46:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS12);
     e48:	ae e4       	ldi	r26, 0x4E	; 78
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ee e4       	ldi	r30, 0x4E	; 78
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	84 60       	ori	r24, 0x04	; 4
     e54:	8c 93       	st	X, r24

	TCNT1 = 0;
     e56:	ec e4       	ldi	r30, 0x4C	; 76
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	11 82       	std	Z+1, r1	; 0x01
     e5c:	10 82       	st	Z, r1

	/*compare value = 15625, to activate interrupt every one second*/
	OCR1A = 15625;
     e5e:	ea e4       	ldi	r30, 0x4A	; 74
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	89 e0       	ldi	r24, 0x09	; 9
     e64:	9d e3       	ldi	r25, 0x3D	; 61
     e66:	91 83       	std	Z+1, r25	; 0x01
     e68:	80 83       	st	Z, r24

	/*activate timer interruptA mask*/
	SET_BIT(TIMSK, OCIE1A);
     e6a:	a9 e5       	ldi	r26, 0x59	; 89
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e9 e5       	ldi	r30, 0x59	; 89
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	80 61       	ori	r24, 0x10	; 16
     e76:	8c 93       	st	X, r24
}
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <external_int0_init>:

void external_int0_init(void)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
	/*configure external interrupt 0 to be triggered by falling edge*/
	SET_BIT(MCUCR, ISC01);
     e86:	a5 e5       	ldi	r26, 0x55	; 85
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e5 e5       	ldi	r30, 0x55	; 85
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	82 60       	ori	r24, 0x02	; 2
     e92:	8c 93       	st	X, r24

	/*activate external interrupt 0 mask*/
	SET_BIT(GICR, INT0);
     e94:	ab e5       	ldi	r26, 0x5B	; 91
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	eb e5       	ldi	r30, 0x5B	; 91
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	80 64       	ori	r24, 0x40	; 64
     ea0:	8c 93       	st	X, r24

	/*set the direction of the pin PD2 in port D to input*/
	CLEAR_BIT(DDRD, PD2);
     ea2:	a1 e3       	ldi	r26, 0x31	; 49
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e1 e3       	ldi	r30, 0x31	; 49
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8b 7f       	andi	r24, 0xFB	; 251
     eae:	8c 93       	st	X, r24

	/*activate internal pull-up resistor for PD2*/
	SET_BIT(PORTD, PD2);
     eb0:	a2 e3       	ldi	r26, 0x32	; 50
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e2 e3       	ldi	r30, 0x32	; 50
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	84 60       	ori	r24, 0x04	; 4
     ebc:	8c 93       	st	X, r24
}
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <external_int1_init>:

void external_int1_init(void)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
	/*configure external interrupt 1 to be triggered by raising edge*/
	SET_BIT(MCUCR, ISC11);
     ecc:	a5 e5       	ldi	r26, 0x55	; 85
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e5       	ldi	r30, 0x55	; 85
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	88 60       	ori	r24, 0x08	; 8
     ed8:	8c 93       	st	X, r24
	SET_BIT(MCUCR, ISC10);
     eda:	a5 e5       	ldi	r26, 0x55	; 85
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e5 e5       	ldi	r30, 0x55	; 85
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	84 60       	ori	r24, 0x04	; 4
     ee6:	8c 93       	st	X, r24

	/*activate external interrupt 1 mask*/
	SET_BIT(GICR, INT1);
     ee8:	ab e5       	ldi	r26, 0x5B	; 91
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	eb e5       	ldi	r30, 0x5B	; 91
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 68       	ori	r24, 0x80	; 128
     ef4:	8c 93       	st	X, r24

	/*set the direction of the pin PD3 in port D to input*/
	CLEAR_BIT(DDRD, PD3);
     ef6:	a1 e3       	ldi	r26, 0x31	; 49
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e1 e3       	ldi	r30, 0x31	; 49
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	87 7f       	andi	r24, 0xF7	; 247
     f02:	8c 93       	st	X, r24
}
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <external_int2_init>:

void external_int2_init(void)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
	/*configure external interrupt 2 to be triggered by falling edge*/
	CLEAR_BIT(MCUCSR, ISC2);
     f12:	a4 e5       	ldi	r26, 0x54	; 84
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e4 e5       	ldi	r30, 0x54	; 84
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8f 7b       	andi	r24, 0xBF	; 191
     f1e:	8c 93       	st	X, r24

	/*activate external interrupt 2 mask*/
	SET_BIT(GICR, INT2);
     f20:	ab e5       	ldi	r26, 0x5B	; 91
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	eb e5       	ldi	r30, 0x5B	; 91
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	80 62       	ori	r24, 0x20	; 32
     f2c:	8c 93       	st	X, r24

	/*set the direction of the pin PB2 in port B to input*/
	CLEAR_BIT(DDRB, PB2);
     f2e:	a7 e3       	ldi	r26, 0x37	; 55
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e7 e3       	ldi	r30, 0x37	; 55
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	8b 7f       	andi	r24, 0xFB	; 251
     f3a:	8c 93       	st	X, r24

	/*activate internal pull-up resistor for PB2*/
	SET_BIT(PORTB, PB2);
     f3c:	a8 e3       	ldi	r26, 0x38	; 56
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e8 e3       	ldi	r30, 0x38	; 56
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	84 60       	ori	r24, 0x04	; 4
     f48:	8c 93       	st	X, r24
}
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <time_handle>:
void time_handle(void)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <time_handle+0x6>
     f56:	00 d0       	rcall	.+0      	; 0xf58 <time_handle+0x8>
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
	/*function to get the time digits to be displayed on the 7-segments*/
	/*when time reaches max start over*/
	/*second condition is due to the proteus simulation glitch*/
	if(time > 359999 && time < 0xFFFFFFF0)
     f5c:	80 91 68 00 	lds	r24, 0x0068
     f60:	90 91 69 00 	lds	r25, 0x0069
     f64:	a0 91 6a 00 	lds	r26, 0x006A
     f68:	b0 91 6b 00 	lds	r27, 0x006B
     f6c:	80 34       	cpi	r24, 0x40	; 64
     f6e:	2e e7       	ldi	r18, 0x7E	; 126
     f70:	92 07       	cpc	r25, r18
     f72:	25 e0       	ldi	r18, 0x05	; 5
     f74:	a2 07       	cpc	r26, r18
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	b2 07       	cpc	r27, r18
     f7a:	c0 f0       	brcs	.+48     	; 0xfac <time_handle+0x5c>
     f7c:	80 91 68 00 	lds	r24, 0x0068
     f80:	90 91 69 00 	lds	r25, 0x0069
     f84:	a0 91 6a 00 	lds	r26, 0x006A
     f88:	b0 91 6b 00 	lds	r27, 0x006B
     f8c:	80 3f       	cpi	r24, 0xF0	; 240
     f8e:	4f ef       	ldi	r20, 0xFF	; 255
     f90:	94 07       	cpc	r25, r20
     f92:	4f ef       	ldi	r20, 0xFF	; 255
     f94:	a4 07       	cpc	r26, r20
     f96:	4f ef       	ldi	r20, 0xFF	; 255
     f98:	b4 07       	cpc	r27, r20
     f9a:	40 f4       	brcc	.+16     	; 0xfac <time_handle+0x5c>
	{
		time = 0;
     f9c:	10 92 68 00 	sts	0x0068, r1
     fa0:	10 92 69 00 	sts	0x0069, r1
     fa4:	10 92 6a 00 	sts	0x006A, r1
     fa8:	10 92 6b 00 	sts	0x006B, r1
	}
	unsigned long temp = time;
     fac:	80 91 68 00 	lds	r24, 0x0068
     fb0:	90 91 69 00 	lds	r25, 0x0069
     fb4:	a0 91 6a 00 	lds	r26, 0x006A
     fb8:	b0 91 6b 00 	lds	r27, 0x006B
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	9a 83       	std	Y+2, r25	; 0x02
     fc0:	ab 83       	std	Y+3, r26	; 0x03
     fc2:	bc 83       	std	Y+4, r27	; 0x04
	/*calculations to get time digits*/
	/*hr2 -> 60 * 60 * 10 = 36000*/
	hr2 = (unsigned char) (temp/36000);
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	ab 81       	ldd	r26, Y+3	; 0x03
     fca:	bc 81       	ldd	r27, Y+4	; 0x04
     fcc:	20 ea       	ldi	r18, 0xA0	; 160
     fce:	3c e8       	ldi	r19, 0x8C	; 140
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	bc 01       	movw	r22, r24
     fd6:	cd 01       	movw	r24, r26
     fd8:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__udivmodsi4>
     fdc:	da 01       	movw	r26, r20
     fde:	c9 01       	movw	r24, r18
     fe0:	80 93 71 00 	sts	0x0071, r24
	temp = temp - (36000*hr2);
     fe4:	80 91 71 00 	lds	r24, 0x0071
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a0 e0       	ldi	r26, 0x00	; 0
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	20 e6       	ldi	r18, 0x60	; 96
     ff2:	33 e7       	ldi	r19, 0x73	; 115
     ff4:	4f ef       	ldi	r20, 0xFF	; 255
     ff6:	5f ef       	ldi	r21, 0xFF	; 255
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	0e 94 65 16 	call	0x2cca	; 0x2cca <__mulsi3>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	9c 01       	movw	r18, r24
    1006:	ad 01       	movw	r20, r26
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	9a 81       	ldd	r25, Y+2	; 0x02
    100c:	ab 81       	ldd	r26, Y+3	; 0x03
    100e:	bc 81       	ldd	r27, Y+4	; 0x04
    1010:	82 0f       	add	r24, r18
    1012:	93 1f       	adc	r25, r19
    1014:	a4 1f       	adc	r26, r20
    1016:	b5 1f       	adc	r27, r21
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	9a 83       	std	Y+2, r25	; 0x02
    101c:	ab 83       	std	Y+3, r26	; 0x03
    101e:	bc 83       	std	Y+4, r27	; 0x04
	/*hr1 -> 60 * 60 = 3600*/
	hr1 = (unsigned char) (temp/3600);
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	ab 81       	ldd	r26, Y+3	; 0x03
    1026:	bc 81       	ldd	r27, Y+4	; 0x04
    1028:	20 e1       	ldi	r18, 0x10	; 16
    102a:	3e e0       	ldi	r19, 0x0E	; 14
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__udivmodsi4>
    1038:	da 01       	movw	r26, r20
    103a:	c9 01       	movw	r24, r18
    103c:	80 93 70 00 	sts	0x0070, r24
	temp = temp - (3600*hr1);
    1040:	80 91 70 00 	lds	r24, 0x0070
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	80 e1       	ldi	r24, 0x10	; 16
    104a:	9e e0       	ldi	r25, 0x0E	; 14
    104c:	ac 01       	movw	r20, r24
    104e:	24 9f       	mul	r18, r20
    1050:	c0 01       	movw	r24, r0
    1052:	25 9f       	mul	r18, r21
    1054:	90 0d       	add	r25, r0
    1056:	34 9f       	mul	r19, r20
    1058:	90 0d       	add	r25, r0
    105a:	11 24       	eor	r1, r1
    105c:	9c 01       	movw	r18, r24
    105e:	44 27       	eor	r20, r20
    1060:	37 fd       	sbrc	r19, 7
    1062:	40 95       	com	r20
    1064:	54 2f       	mov	r21, r20
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	ab 81       	ldd	r26, Y+3	; 0x03
    106c:	bc 81       	ldd	r27, Y+4	; 0x04
    106e:	82 1b       	sub	r24, r18
    1070:	93 0b       	sbc	r25, r19
    1072:	a4 0b       	sbc	r26, r20
    1074:	b5 0b       	sbc	r27, r21
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	ab 83       	std	Y+3, r26	; 0x03
    107c:	bc 83       	std	Y+4, r27	; 0x04
	/*min2 -> 60 * 10 = 600*/
	min2 = (unsigned char) (temp/600);
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	9a 81       	ldd	r25, Y+2	; 0x02
    1082:	ab 81       	ldd	r26, Y+3	; 0x03
    1084:	bc 81       	ldd	r27, Y+4	; 0x04
    1086:	28 e5       	ldi	r18, 0x58	; 88
    1088:	32 e0       	ldi	r19, 0x02	; 2
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__udivmodsi4>
    1096:	da 01       	movw	r26, r20
    1098:	c9 01       	movw	r24, r18
    109a:	80 93 6f 00 	sts	0x006F, r24
	temp = temp - (600*min2);
    109e:	80 91 6f 00 	lds	r24, 0x006F
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	88 e5       	ldi	r24, 0x58	; 88
    10a8:	92 e0       	ldi	r25, 0x02	; 2
    10aa:	ac 01       	movw	r20, r24
    10ac:	24 9f       	mul	r18, r20
    10ae:	c0 01       	movw	r24, r0
    10b0:	25 9f       	mul	r18, r21
    10b2:	90 0d       	add	r25, r0
    10b4:	34 9f       	mul	r19, r20
    10b6:	90 0d       	add	r25, r0
    10b8:	11 24       	eor	r1, r1
    10ba:	9c 01       	movw	r18, r24
    10bc:	44 27       	eor	r20, r20
    10be:	37 fd       	sbrc	r19, 7
    10c0:	40 95       	com	r20
    10c2:	54 2f       	mov	r21, r20
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	ab 81       	ldd	r26, Y+3	; 0x03
    10ca:	bc 81       	ldd	r27, Y+4	; 0x04
    10cc:	82 1b       	sub	r24, r18
    10ce:	93 0b       	sbc	r25, r19
    10d0:	a4 0b       	sbc	r26, r20
    10d2:	b5 0b       	sbc	r27, r21
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	9a 83       	std	Y+2, r25	; 0x02
    10d8:	ab 83       	std	Y+3, r26	; 0x03
    10da:	bc 83       	std	Y+4, r27	; 0x04
	/*min1 -> 60*/
	min1 = (unsigned char) (temp/60);
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	9a 81       	ldd	r25, Y+2	; 0x02
    10e0:	ab 81       	ldd	r26, Y+3	; 0x03
    10e2:	bc 81       	ldd	r27, Y+4	; 0x04
    10e4:	2c e3       	ldi	r18, 0x3C	; 60
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	bc 01       	movw	r22, r24
    10ee:	cd 01       	movw	r24, r26
    10f0:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__udivmodsi4>
    10f4:	da 01       	movw	r26, r20
    10f6:	c9 01       	movw	r24, r18
    10f8:	80 93 6e 00 	sts	0x006E, r24
	temp = temp - (60*min1);
    10fc:	80 91 6e 00 	lds	r24, 0x006E
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	8c e3       	ldi	r24, 0x3C	; 60
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	ac 01       	movw	r20, r24
    110a:	24 9f       	mul	r18, r20
    110c:	c0 01       	movw	r24, r0
    110e:	25 9f       	mul	r18, r21
    1110:	90 0d       	add	r25, r0
    1112:	34 9f       	mul	r19, r20
    1114:	90 0d       	add	r25, r0
    1116:	11 24       	eor	r1, r1
    1118:	9c 01       	movw	r18, r24
    111a:	44 27       	eor	r20, r20
    111c:	37 fd       	sbrc	r19, 7
    111e:	40 95       	com	r20
    1120:	54 2f       	mov	r21, r20
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	ab 81       	ldd	r26, Y+3	; 0x03
    1128:	bc 81       	ldd	r27, Y+4	; 0x04
    112a:	82 1b       	sub	r24, r18
    112c:	93 0b       	sbc	r25, r19
    112e:	a4 0b       	sbc	r26, r20
    1130:	b5 0b       	sbc	r27, r21
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	9a 83       	std	Y+2, r25	; 0x02
    1136:	ab 83       	std	Y+3, r26	; 0x03
    1138:	bc 83       	std	Y+4, r27	; 0x04
	/*sec2 -> 10*/
	sec2 = (unsigned char) (temp/10);
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	9a 81       	ldd	r25, Y+2	; 0x02
    113e:	ab 81       	ldd	r26, Y+3	; 0x03
    1140:	bc 81       	ldd	r27, Y+4	; 0x04
    1142:	2a e0       	ldi	r18, 0x0A	; 10
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__udivmodsi4>
    1152:	da 01       	movw	r26, r20
    1154:	c9 01       	movw	r24, r18
    1156:	80 93 6d 00 	sts	0x006D, r24
	temp = temp - (10*sec2);
    115a:	80 91 6d 00 	lds	r24, 0x006D
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	9c 01       	movw	r18, r24
    1164:	22 0f       	add	r18, r18
    1166:	33 1f       	adc	r19, r19
    1168:	c9 01       	movw	r24, r18
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	82 0f       	add	r24, r18
    1174:	93 1f       	adc	r25, r19
    1176:	9c 01       	movw	r18, r24
    1178:	44 27       	eor	r20, r20
    117a:	37 fd       	sbrc	r19, 7
    117c:	40 95       	com	r20
    117e:	54 2f       	mov	r21, r20
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	ab 81       	ldd	r26, Y+3	; 0x03
    1186:	bc 81       	ldd	r27, Y+4	; 0x04
    1188:	82 1b       	sub	r24, r18
    118a:	93 0b       	sbc	r25, r19
    118c:	a4 0b       	sbc	r26, r20
    118e:	b5 0b       	sbc	r27, r21
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	ab 83       	std	Y+3, r26	; 0x03
    1196:	bc 83       	std	Y+4, r27	; 0x04
	/*sec1 -> 1*/
	sec1 = (unsigned char) temp;
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	80 93 6c 00 	sts	0x006C, r24
}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <time_dispaly>:

void time_dispaly(void)
{
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	c4 55       	subi	r28, 0x54	; 84
    11ba:	d0 40       	sbci	r29, 0x00	; 0
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
	/*function to display time*/
	/*time digits display on the 6 multiplexed 7-segment*/

	time_handle();
    11c6:	0e 94 a8 07 	call	0xf50	; 0xf50 <time_handle>

	/*seconds least significant digit display*/
	SET_BIT(PORTA, PA0);
    11ca:	ab e3       	ldi	r26, 0x3B	; 59
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	eb e3       	ldi	r30, 0x3B	; 59
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	81 60       	ori	r24, 0x01	; 1
    11d6:	8c 93       	st	X, r24
	PORTC = (PORTC & 0xF0) | (sec1 & 0x0F);
    11d8:	a5 e3       	ldi	r26, 0x35	; 53
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e5 e3       	ldi	r30, 0x35	; 53
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	98 2f       	mov	r25, r24
    11e4:	90 7f       	andi	r25, 0xF0	; 240
    11e6:	80 91 6c 00 	lds	r24, 0x006C
    11ea:	8f 70       	andi	r24, 0x0F	; 15
    11ec:	89 2b       	or	r24, r25
    11ee:	8c 93       	st	X, r24
    11f0:	fe 01       	movw	r30, r28
    11f2:	ef 5a       	subi	r30, 0xAF	; 175
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a0 e8       	ldi	r26, 0x80	; 128
    11fc:	bf e3       	ldi	r27, 0x3F	; 63
    11fe:	80 83       	st	Z, r24
    1200:	91 83       	std	Z+1, r25	; 0x01
    1202:	a2 83       	std	Z+2, r26	; 0x02
    1204:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1206:	8e 01       	movw	r16, r28
    1208:	03 5b       	subi	r16, 0xB3	; 179
    120a:	1f 4f       	sbci	r17, 0xFF	; 255
    120c:	fe 01       	movw	r30, r28
    120e:	ef 5a       	subi	r30, 0xAF	; 175
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	60 81       	ld	r22, Z
    1214:	71 81       	ldd	r23, Z+1	; 0x01
    1216:	82 81       	ldd	r24, Z+2	; 0x02
    1218:	93 81       	ldd	r25, Z+3	; 0x03
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	4a e7       	ldi	r20, 0x7A	; 122
    1220:	55 e4       	ldi	r21, 0x45	; 69
    1222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	f8 01       	movw	r30, r16
    122c:	80 83       	st	Z, r24
    122e:	91 83       	std	Z+1, r25	; 0x01
    1230:	a2 83       	std	Z+2, r26	; 0x02
    1232:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1234:	fe 01       	movw	r30, r28
    1236:	e3 5b       	subi	r30, 0xB3	; 179
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	60 81       	ld	r22, Z
    123c:	71 81       	ldd	r23, Z+1	; 0x01
    123e:	82 81       	ldd	r24, Z+2	; 0x02
    1240:	93 81       	ldd	r25, Z+3	; 0x03
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e8       	ldi	r20, 0x80	; 128
    1248:	5f e3       	ldi	r21, 0x3F	; 63
    124a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    124e:	88 23       	and	r24, r24
    1250:	44 f4       	brge	.+16     	; 0x1262 <time_dispaly+0xb6>
		__ticks = 1;
    1252:	fe 01       	movw	r30, r28
    1254:	e5 5b       	subi	r30, 0xB5	; 181
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	91 83       	std	Z+1, r25	; 0x01
    125e:	80 83       	st	Z, r24
    1260:	64 c0       	rjmp	.+200    	; 0x132a <time_dispaly+0x17e>
	else if (__tmp > 65535)
    1262:	fe 01       	movw	r30, r28
    1264:	e3 5b       	subi	r30, 0xB3	; 179
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	60 81       	ld	r22, Z
    126a:	71 81       	ldd	r23, Z+1	; 0x01
    126c:	82 81       	ldd	r24, Z+2	; 0x02
    126e:	93 81       	ldd	r25, Z+3	; 0x03
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	3f ef       	ldi	r19, 0xFF	; 255
    1274:	4f e7       	ldi	r20, 0x7F	; 127
    1276:	57 e4       	ldi	r21, 0x47	; 71
    1278:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    127c:	18 16       	cp	r1, r24
    127e:	0c f0       	brlt	.+2      	; 0x1282 <time_dispaly+0xd6>
    1280:	43 c0       	rjmp	.+134    	; 0x1308 <time_dispaly+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1282:	fe 01       	movw	r30, r28
    1284:	ef 5a       	subi	r30, 0xAF	; 175
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	60 81       	ld	r22, Z
    128a:	71 81       	ldd	r23, Z+1	; 0x01
    128c:	82 81       	ldd	r24, Z+2	; 0x02
    128e:	93 81       	ldd	r25, Z+3	; 0x03
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e2       	ldi	r20, 0x20	; 32
    1296:	51 e4       	ldi	r21, 0x41	; 65
    1298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	8e 01       	movw	r16, r28
    12a2:	05 5b       	subi	r16, 0xB5	; 181
    12a4:	1f 4f       	sbci	r17, 0xFF	; 255
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	f8 01       	movw	r30, r16
    12b4:	91 83       	std	Z+1, r25	; 0x01
    12b6:	80 83       	st	Z, r24
    12b8:	1f c0       	rjmp	.+62     	; 0x12f8 <time_dispaly+0x14c>
    12ba:	fe 01       	movw	r30, r28
    12bc:	e7 5b       	subi	r30, 0xB7	; 183
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	80 e9       	ldi	r24, 0x90	; 144
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	91 83       	std	Z+1, r25	; 0x01
    12c6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12c8:	fe 01       	movw	r30, r28
    12ca:	e7 5b       	subi	r30, 0xB7	; 183
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	80 81       	ld	r24, Z
    12d0:	91 81       	ldd	r25, Z+1	; 0x01
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <time_dispaly+0x126>
    12d6:	fe 01       	movw	r30, r28
    12d8:	e7 5b       	subi	r30, 0xB7	; 183
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	91 83       	std	Z+1, r25	; 0x01
    12de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e0:	de 01       	movw	r26, r28
    12e2:	a5 5b       	subi	r26, 0xB5	; 181
    12e4:	bf 4f       	sbci	r27, 0xFF	; 255
    12e6:	fe 01       	movw	r30, r28
    12e8:	e5 5b       	subi	r30, 0xB5	; 181
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	11 96       	adiw	r26, 0x01	; 1
    12f4:	9c 93       	st	X, r25
    12f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f8:	fe 01       	movw	r30, r28
    12fa:	e5 5b       	subi	r30, 0xB5	; 181
    12fc:	ff 4f       	sbci	r31, 0xFF	; 255
    12fe:	80 81       	ld	r24, Z
    1300:	91 81       	ldd	r25, Z+1	; 0x01
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	d1 f6       	brne	.-76     	; 0x12ba <time_dispaly+0x10e>
    1306:	27 c0       	rjmp	.+78     	; 0x1356 <time_dispaly+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1308:	8e 01       	movw	r16, r28
    130a:	05 5b       	subi	r16, 0xB5	; 181
    130c:	1f 4f       	sbci	r17, 0xFF	; 255
    130e:	fe 01       	movw	r30, r28
    1310:	e3 5b       	subi	r30, 0xB3	; 179
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	60 81       	ld	r22, Z
    1316:	71 81       	ldd	r23, Z+1	; 0x01
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	93 81       	ldd	r25, Z+3	; 0x03
    131c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	f8 01       	movw	r30, r16
    1326:	91 83       	std	Z+1, r25	; 0x01
    1328:	80 83       	st	Z, r24
    132a:	de 01       	movw	r26, r28
    132c:	a9 5b       	subi	r26, 0xB9	; 185
    132e:	bf 4f       	sbci	r27, 0xFF	; 255
    1330:	fe 01       	movw	r30, r28
    1332:	e5 5b       	subi	r30, 0xB5	; 181
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	8d 93       	st	X+, r24
    133c:	9c 93       	st	X, r25
    133e:	fe 01       	movw	r30, r28
    1340:	e9 5b       	subi	r30, 0xB9	; 185
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <time_dispaly+0x19c>
    134c:	fe 01       	movw	r30, r28
    134e:	e9 5b       	subi	r30, 0xB9	; 185
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	80 83       	st	Z, r24
	_delay_ms(1);
	CLEAR_BIT(PORTA, PA0);
    1356:	ab e3       	ldi	r26, 0x3B	; 59
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	eb e3       	ldi	r30, 0x3B	; 59
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	8e 7f       	andi	r24, 0xFE	; 254
    1362:	8c 93       	st	X, r24

	/*seconds most significant digit display*/
	SET_BIT(PORTA, PA1);
    1364:	ab e3       	ldi	r26, 0x3B	; 59
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	eb e3       	ldi	r30, 0x3B	; 59
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	82 60       	ori	r24, 0x02	; 2
    1370:	8c 93       	st	X, r24
	PORTC = (PORTC & 0xF0) | (sec2 & 0x0F);
    1372:	a5 e3       	ldi	r26, 0x35	; 53
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e5 e3       	ldi	r30, 0x35	; 53
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	98 2f       	mov	r25, r24
    137e:	90 7f       	andi	r25, 0xF0	; 240
    1380:	80 91 6d 00 	lds	r24, 0x006D
    1384:	8f 70       	andi	r24, 0x0F	; 15
    1386:	89 2b       	or	r24, r25
    1388:	8c 93       	st	X, r24
    138a:	fe 01       	movw	r30, r28
    138c:	ed 5b       	subi	r30, 0xBD	; 189
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	a0 e0       	ldi	r26, 0x00	; 0
    1396:	b0 e4       	ldi	r27, 0x40	; 64
    1398:	80 83       	st	Z, r24
    139a:	91 83       	std	Z+1, r25	; 0x01
    139c:	a2 83       	std	Z+2, r26	; 0x02
    139e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a0:	8e 01       	movw	r16, r28
    13a2:	01 5c       	subi	r16, 0xC1	; 193
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	fe 01       	movw	r30, r28
    13a8:	ed 5b       	subi	r30, 0xBD	; 189
    13aa:	ff 4f       	sbci	r31, 0xFF	; 255
    13ac:	60 81       	ld	r22, Z
    13ae:	71 81       	ldd	r23, Z+1	; 0x01
    13b0:	82 81       	ldd	r24, Z+2	; 0x02
    13b2:	93 81       	ldd	r25, Z+3	; 0x03
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	4a e7       	ldi	r20, 0x7A	; 122
    13ba:	55 e4       	ldi	r21, 0x45	; 69
    13bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	f8 01       	movw	r30, r16
    13c6:	80 83       	st	Z, r24
    13c8:	91 83       	std	Z+1, r25	; 0x01
    13ca:	a2 83       	std	Z+2, r26	; 0x02
    13cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13ce:	fe 01       	movw	r30, r28
    13d0:	ff 96       	adiw	r30, 0x3f	; 63
    13d2:	60 81       	ld	r22, Z
    13d4:	71 81       	ldd	r23, Z+1	; 0x01
    13d6:	82 81       	ldd	r24, Z+2	; 0x02
    13d8:	93 81       	ldd	r25, Z+3	; 0x03
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e8       	ldi	r20, 0x80	; 128
    13e0:	5f e3       	ldi	r21, 0x3F	; 63
    13e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13e6:	88 23       	and	r24, r24
    13e8:	2c f4       	brge	.+10     	; 0x13f4 <time_dispaly+0x248>
		__ticks = 1;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	9e af       	std	Y+62, r25	; 0x3e
    13f0:	8d af       	std	Y+61, r24	; 0x3d
    13f2:	46 c0       	rjmp	.+140    	; 0x1480 <time_dispaly+0x2d4>
	else if (__tmp > 65535)
    13f4:	fe 01       	movw	r30, r28
    13f6:	ff 96       	adiw	r30, 0x3f	; 63
    13f8:	60 81       	ld	r22, Z
    13fa:	71 81       	ldd	r23, Z+1	; 0x01
    13fc:	82 81       	ldd	r24, Z+2	; 0x02
    13fe:	93 81       	ldd	r25, Z+3	; 0x03
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	3f ef       	ldi	r19, 0xFF	; 255
    1404:	4f e7       	ldi	r20, 0x7F	; 127
    1406:	57 e4       	ldi	r21, 0x47	; 71
    1408:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    140c:	18 16       	cp	r1, r24
    140e:	64 f5       	brge	.+88     	; 0x1468 <time_dispaly+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1410:	fe 01       	movw	r30, r28
    1412:	ed 5b       	subi	r30, 0xBD	; 189
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	60 81       	ld	r22, Z
    1418:	71 81       	ldd	r23, Z+1	; 0x01
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e2       	ldi	r20, 0x20	; 32
    1424:	51 e4       	ldi	r21, 0x41	; 65
    1426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	bc 01       	movw	r22, r24
    1430:	cd 01       	movw	r24, r26
    1432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	9e af       	std	Y+62, r25	; 0x3e
    143c:	8d af       	std	Y+61, r24	; 0x3d
    143e:	0f c0       	rjmp	.+30     	; 0x145e <time_dispaly+0x2b2>
    1440:	80 e9       	ldi	r24, 0x90	; 144
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	9c af       	std	Y+60, r25	; 0x3c
    1446:	8b af       	std	Y+59, r24	; 0x3b
    1448:	8b ad       	ldd	r24, Y+59	; 0x3b
    144a:	9c ad       	ldd	r25, Y+60	; 0x3c
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <time_dispaly+0x2a0>
    1450:	9c af       	std	Y+60, r25	; 0x3c
    1452:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1454:	8d ad       	ldd	r24, Y+61	; 0x3d
    1456:	9e ad       	ldd	r25, Y+62	; 0x3e
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	9e af       	std	Y+62, r25	; 0x3e
    145c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1460:	9e ad       	ldd	r25, Y+62	; 0x3e
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	69 f7       	brne	.-38     	; 0x1440 <time_dispaly+0x294>
    1466:	16 c0       	rjmp	.+44     	; 0x1494 <time_dispaly+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1468:	fe 01       	movw	r30, r28
    146a:	ff 96       	adiw	r30, 0x3f	; 63
    146c:	60 81       	ld	r22, Z
    146e:	71 81       	ldd	r23, Z+1	; 0x01
    1470:	82 81       	ldd	r24, Z+2	; 0x02
    1472:	93 81       	ldd	r25, Z+3	; 0x03
    1474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	9e af       	std	Y+62, r25	; 0x3e
    147e:	8d af       	std	Y+61, r24	; 0x3d
    1480:	8d ad       	ldd	r24, Y+61	; 0x3d
    1482:	9e ad       	ldd	r25, Y+62	; 0x3e
    1484:	9a af       	std	Y+58, r25	; 0x3a
    1486:	89 af       	std	Y+57, r24	; 0x39
    1488:	89 ad       	ldd	r24, Y+57	; 0x39
    148a:	9a ad       	ldd	r25, Y+58	; 0x3a
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <time_dispaly+0x2e0>
    1490:	9a af       	std	Y+58, r25	; 0x3a
    1492:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	CLEAR_BIT(PORTA, PA1);
    1494:	ab e3       	ldi	r26, 0x3B	; 59
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	eb e3       	ldi	r30, 0x3B	; 59
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	8d 7f       	andi	r24, 0xFD	; 253
    14a0:	8c 93       	st	X, r24

	/*minutes least significant digit display*/
	SET_BIT(PORTA, PA2);
    14a2:	ab e3       	ldi	r26, 0x3B	; 59
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	eb e3       	ldi	r30, 0x3B	; 59
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	84 60       	ori	r24, 0x04	; 4
    14ae:	8c 93       	st	X, r24
	PORTC = (PORTC & 0xF0) | (min1 & 0x0F);
    14b0:	a5 e3       	ldi	r26, 0x35	; 53
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e5 e3       	ldi	r30, 0x35	; 53
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	98 2f       	mov	r25, r24
    14bc:	90 7f       	andi	r25, 0xF0	; 240
    14be:	80 91 6e 00 	lds	r24, 0x006E
    14c2:	8f 70       	andi	r24, 0x0F	; 15
    14c4:	89 2b       	or	r24, r25
    14c6:	8c 93       	st	X, r24
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	a0 e0       	ldi	r26, 0x00	; 0
    14ce:	b0 e4       	ldi	r27, 0x40	; 64
    14d0:	8d ab       	std	Y+53, r24	; 0x35
    14d2:	9e ab       	std	Y+54, r25	; 0x36
    14d4:	af ab       	std	Y+55, r26	; 0x37
    14d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d8:	6d a9       	ldd	r22, Y+53	; 0x35
    14da:	7e a9       	ldd	r23, Y+54	; 0x36
    14dc:	8f a9       	ldd	r24, Y+55	; 0x37
    14de:	98 ad       	ldd	r25, Y+56	; 0x38
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	4a e7       	ldi	r20, 0x7A	; 122
    14e6:	55 e4       	ldi	r21, 0x45	; 69
    14e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	89 ab       	std	Y+49, r24	; 0x31
    14f2:	9a ab       	std	Y+50, r25	; 0x32
    14f4:	ab ab       	std	Y+51, r26	; 0x33
    14f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14f8:	69 a9       	ldd	r22, Y+49	; 0x31
    14fa:	7a a9       	ldd	r23, Y+50	; 0x32
    14fc:	8b a9       	ldd	r24, Y+51	; 0x33
    14fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e8       	ldi	r20, 0x80	; 128
    1506:	5f e3       	ldi	r21, 0x3F	; 63
    1508:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    150c:	88 23       	and	r24, r24
    150e:	2c f4       	brge	.+10     	; 0x151a <time_dispaly+0x36e>
		__ticks = 1;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	98 ab       	std	Y+48, r25	; 0x30
    1516:	8f a7       	std	Y+47, r24	; 0x2f
    1518:	3f c0       	rjmp	.+126    	; 0x1598 <time_dispaly+0x3ec>
	else if (__tmp > 65535)
    151a:	69 a9       	ldd	r22, Y+49	; 0x31
    151c:	7a a9       	ldd	r23, Y+50	; 0x32
    151e:	8b a9       	ldd	r24, Y+51	; 0x33
    1520:	9c a9       	ldd	r25, Y+52	; 0x34
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	3f ef       	ldi	r19, 0xFF	; 255
    1526:	4f e7       	ldi	r20, 0x7F	; 127
    1528:	57 e4       	ldi	r21, 0x47	; 71
    152a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    152e:	18 16       	cp	r1, r24
    1530:	4c f5       	brge	.+82     	; 0x1584 <time_dispaly+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1532:	6d a9       	ldd	r22, Y+53	; 0x35
    1534:	7e a9       	ldd	r23, Y+54	; 0x36
    1536:	8f a9       	ldd	r24, Y+55	; 0x37
    1538:	98 ad       	ldd	r25, Y+56	; 0x38
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e2       	ldi	r20, 0x20	; 32
    1540:	51 e4       	ldi	r21, 0x41	; 65
    1542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	bc 01       	movw	r22, r24
    154c:	cd 01       	movw	r24, r26
    154e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	98 ab       	std	Y+48, r25	; 0x30
    1558:	8f a7       	std	Y+47, r24	; 0x2f
    155a:	0f c0       	rjmp	.+30     	; 0x157a <time_dispaly+0x3ce>
    155c:	80 e9       	ldi	r24, 0x90	; 144
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	9e a7       	std	Y+46, r25	; 0x2e
    1562:	8d a7       	std	Y+45, r24	; 0x2d
    1564:	8d a5       	ldd	r24, Y+45	; 0x2d
    1566:	9e a5       	ldd	r25, Y+46	; 0x2e
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	f1 f7       	brne	.-4      	; 0x1568 <time_dispaly+0x3bc>
    156c:	9e a7       	std	Y+46, r25	; 0x2e
    156e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1570:	8f a5       	ldd	r24, Y+47	; 0x2f
    1572:	98 a9       	ldd	r25, Y+48	; 0x30
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	98 ab       	std	Y+48, r25	; 0x30
    1578:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157a:	8f a5       	ldd	r24, Y+47	; 0x2f
    157c:	98 a9       	ldd	r25, Y+48	; 0x30
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	69 f7       	brne	.-38     	; 0x155c <time_dispaly+0x3b0>
    1582:	14 c0       	rjmp	.+40     	; 0x15ac <time_dispaly+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1584:	69 a9       	ldd	r22, Y+49	; 0x31
    1586:	7a a9       	ldd	r23, Y+50	; 0x32
    1588:	8b a9       	ldd	r24, Y+51	; 0x33
    158a:	9c a9       	ldd	r25, Y+52	; 0x34
    158c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	98 ab       	std	Y+48, r25	; 0x30
    1596:	8f a7       	std	Y+47, r24	; 0x2f
    1598:	8f a5       	ldd	r24, Y+47	; 0x2f
    159a:	98 a9       	ldd	r25, Y+48	; 0x30
    159c:	9c a7       	std	Y+44, r25	; 0x2c
    159e:	8b a7       	std	Y+43, r24	; 0x2b
    15a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    15a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <time_dispaly+0x3f8>
    15a8:	9c a7       	std	Y+44, r25	; 0x2c
    15aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	CLEAR_BIT(PORTA, PA2);
    15ac:	ab e3       	ldi	r26, 0x3B	; 59
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	eb e3       	ldi	r30, 0x3B	; 59
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	8b 7f       	andi	r24, 0xFB	; 251
    15b8:	8c 93       	st	X, r24

	/*minutes most significant digit display*/
	SET_BIT(PORTA, PA3);
    15ba:	ab e3       	ldi	r26, 0x3B	; 59
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	eb e3       	ldi	r30, 0x3B	; 59
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	88 60       	ori	r24, 0x08	; 8
    15c6:	8c 93       	st	X, r24
	PORTC = (PORTC & 0xF0) | (min2 & 0x0F);
    15c8:	a5 e3       	ldi	r26, 0x35	; 53
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e5 e3       	ldi	r30, 0x35	; 53
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	98 2f       	mov	r25, r24
    15d4:	90 7f       	andi	r25, 0xF0	; 240
    15d6:	80 91 6f 00 	lds	r24, 0x006F
    15da:	8f 70       	andi	r24, 0x0F	; 15
    15dc:	89 2b       	or	r24, r25
    15de:	8c 93       	st	X, r24
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a0 e0       	ldi	r26, 0x00	; 0
    15e6:	b0 e4       	ldi	r27, 0x40	; 64
    15e8:	8f a3       	std	Y+39, r24	; 0x27
    15ea:	98 a7       	std	Y+40, r25	; 0x28
    15ec:	a9 a7       	std	Y+41, r26	; 0x29
    15ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f0:	6f a1       	ldd	r22, Y+39	; 0x27
    15f2:	78 a5       	ldd	r23, Y+40	; 0x28
    15f4:	89 a5       	ldd	r24, Y+41	; 0x29
    15f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a e7       	ldi	r20, 0x7A	; 122
    15fe:	55 e4       	ldi	r21, 0x45	; 69
    1600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	8b a3       	std	Y+35, r24	; 0x23
    160a:	9c a3       	std	Y+36, r25	; 0x24
    160c:	ad a3       	std	Y+37, r26	; 0x25
    160e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1610:	6b a1       	ldd	r22, Y+35	; 0x23
    1612:	7c a1       	ldd	r23, Y+36	; 0x24
    1614:	8d a1       	ldd	r24, Y+37	; 0x25
    1616:	9e a1       	ldd	r25, Y+38	; 0x26
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e8       	ldi	r20, 0x80	; 128
    161e:	5f e3       	ldi	r21, 0x3F	; 63
    1620:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1624:	88 23       	and	r24, r24
    1626:	2c f4       	brge	.+10     	; 0x1632 <time_dispaly+0x486>
		__ticks = 1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9a a3       	std	Y+34, r25	; 0x22
    162e:	89 a3       	std	Y+33, r24	; 0x21
    1630:	3f c0       	rjmp	.+126    	; 0x16b0 <time_dispaly+0x504>
	else if (__tmp > 65535)
    1632:	6b a1       	ldd	r22, Y+35	; 0x23
    1634:	7c a1       	ldd	r23, Y+36	; 0x24
    1636:	8d a1       	ldd	r24, Y+37	; 0x25
    1638:	9e a1       	ldd	r25, Y+38	; 0x26
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	3f ef       	ldi	r19, 0xFF	; 255
    163e:	4f e7       	ldi	r20, 0x7F	; 127
    1640:	57 e4       	ldi	r21, 0x47	; 71
    1642:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1646:	18 16       	cp	r1, r24
    1648:	4c f5       	brge	.+82     	; 0x169c <time_dispaly+0x4f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164a:	6f a1       	ldd	r22, Y+39	; 0x27
    164c:	78 a5       	ldd	r23, Y+40	; 0x28
    164e:	89 a5       	ldd	r24, Y+41	; 0x29
    1650:	9a a5       	ldd	r25, Y+42	; 0x2a
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e2       	ldi	r20, 0x20	; 32
    1658:	51 e4       	ldi	r21, 0x41	; 65
    165a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	9a a3       	std	Y+34, r25	; 0x22
    1670:	89 a3       	std	Y+33, r24	; 0x21
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <time_dispaly+0x4e6>
    1674:	80 e9       	ldi	r24, 0x90	; 144
    1676:	91 e0       	ldi	r25, 0x01	; 1
    1678:	98 a3       	std	Y+32, r25	; 0x20
    167a:	8f 8f       	std	Y+31, r24	; 0x1f
    167c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    167e:	98 a1       	ldd	r25, Y+32	; 0x20
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <time_dispaly+0x4d4>
    1684:	98 a3       	std	Y+32, r25	; 0x20
    1686:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1688:	89 a1       	ldd	r24, Y+33	; 0x21
    168a:	9a a1       	ldd	r25, Y+34	; 0x22
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	9a a3       	std	Y+34, r25	; 0x22
    1690:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1692:	89 a1       	ldd	r24, Y+33	; 0x21
    1694:	9a a1       	ldd	r25, Y+34	; 0x22
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	69 f7       	brne	.-38     	; 0x1674 <time_dispaly+0x4c8>
    169a:	14 c0       	rjmp	.+40     	; 0x16c4 <time_dispaly+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169c:	6b a1       	ldd	r22, Y+35	; 0x23
    169e:	7c a1       	ldd	r23, Y+36	; 0x24
    16a0:	8d a1       	ldd	r24, Y+37	; 0x25
    16a2:	9e a1       	ldd	r25, Y+38	; 0x26
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9a a3       	std	Y+34, r25	; 0x22
    16ae:	89 a3       	std	Y+33, r24	; 0x21
    16b0:	89 a1       	ldd	r24, Y+33	; 0x21
    16b2:	9a a1       	ldd	r25, Y+34	; 0x22
    16b4:	9e 8f       	std	Y+30, r25	; 0x1e
    16b6:	8d 8f       	std	Y+29, r24	; 0x1d
    16b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <time_dispaly+0x510>
    16c0:	9e 8f       	std	Y+30, r25	; 0x1e
    16c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	CLEAR_BIT(PORTA, PA3);
    16c4:	ab e3       	ldi	r26, 0x3B	; 59
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	eb e3       	ldi	r30, 0x3B	; 59
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	87 7f       	andi	r24, 0xF7	; 247
    16d0:	8c 93       	st	X, r24

	/*hours least significant digit display*/
	SET_BIT(PORTA, PA4);
    16d2:	ab e3       	ldi	r26, 0x3B	; 59
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	eb e3       	ldi	r30, 0x3B	; 59
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	80 61       	ori	r24, 0x10	; 16
    16de:	8c 93       	st	X, r24
	PORTC = (PORTC & 0xF0) | (hr1 & 0x0F);
    16e0:	a5 e3       	ldi	r26, 0x35	; 53
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e5 e3       	ldi	r30, 0x35	; 53
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	98 2f       	mov	r25, r24
    16ec:	90 7f       	andi	r25, 0xF0	; 240
    16ee:	80 91 70 00 	lds	r24, 0x0070
    16f2:	8f 70       	andi	r24, 0x0F	; 15
    16f4:	89 2b       	or	r24, r25
    16f6:	8c 93       	st	X, r24
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 e0       	ldi	r26, 0x00	; 0
    16fe:	b0 e4       	ldi	r27, 0x40	; 64
    1700:	89 8f       	std	Y+25, r24	; 0x19
    1702:	9a 8f       	std	Y+26, r25	; 0x1a
    1704:	ab 8f       	std	Y+27, r26	; 0x1b
    1706:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	69 8d       	ldd	r22, Y+25	; 0x19
    170a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    170c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    170e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	4a e7       	ldi	r20, 0x7A	; 122
    1716:	55 e4       	ldi	r21, 0x45	; 69
    1718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	8d 8b       	std	Y+21, r24	; 0x15
    1722:	9e 8b       	std	Y+22, r25	; 0x16
    1724:	af 8b       	std	Y+23, r26	; 0x17
    1726:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1728:	6d 89       	ldd	r22, Y+21	; 0x15
    172a:	7e 89       	ldd	r23, Y+22	; 0x16
    172c:	8f 89       	ldd	r24, Y+23	; 0x17
    172e:	98 8d       	ldd	r25, Y+24	; 0x18
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	5f e3       	ldi	r21, 0x3F	; 63
    1738:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    173c:	88 23       	and	r24, r24
    173e:	2c f4       	brge	.+10     	; 0x174a <time_dispaly+0x59e>
		__ticks = 1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9c 8b       	std	Y+20, r25	; 0x14
    1746:	8b 8b       	std	Y+19, r24	; 0x13
    1748:	3f c0       	rjmp	.+126    	; 0x17c8 <time_dispaly+0x61c>
	else if (__tmp > 65535)
    174a:	6d 89       	ldd	r22, Y+21	; 0x15
    174c:	7e 89       	ldd	r23, Y+22	; 0x16
    174e:	8f 89       	ldd	r24, Y+23	; 0x17
    1750:	98 8d       	ldd	r25, Y+24	; 0x18
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	4f e7       	ldi	r20, 0x7F	; 127
    1758:	57 e4       	ldi	r21, 0x47	; 71
    175a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    175e:	18 16       	cp	r1, r24
    1760:	4c f5       	brge	.+82     	; 0x17b4 <time_dispaly+0x608>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1762:	69 8d       	ldd	r22, Y+25	; 0x19
    1764:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1766:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1768:	9c 8d       	ldd	r25, Y+28	; 0x1c
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e2       	ldi	r20, 0x20	; 32
    1770:	51 e4       	ldi	r21, 0x41	; 65
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	bc 01       	movw	r22, r24
    177c:	cd 01       	movw	r24, r26
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9c 8b       	std	Y+20, r25	; 0x14
    1788:	8b 8b       	std	Y+19, r24	; 0x13
    178a:	0f c0       	rjmp	.+30     	; 0x17aa <time_dispaly+0x5fe>
    178c:	80 e9       	ldi	r24, 0x90	; 144
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	9a 8b       	std	Y+18, r25	; 0x12
    1792:	89 8b       	std	Y+17, r24	; 0x11
    1794:	89 89       	ldd	r24, Y+17	; 0x11
    1796:	9a 89       	ldd	r25, Y+18	; 0x12
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <time_dispaly+0x5ec>
    179c:	9a 8b       	std	Y+18, r25	; 0x12
    179e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a0:	8b 89       	ldd	r24, Y+19	; 0x13
    17a2:	9c 89       	ldd	r25, Y+20	; 0x14
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	9c 8b       	std	Y+20, r25	; 0x14
    17a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17aa:	8b 89       	ldd	r24, Y+19	; 0x13
    17ac:	9c 89       	ldd	r25, Y+20	; 0x14
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	69 f7       	brne	.-38     	; 0x178c <time_dispaly+0x5e0>
    17b2:	14 c0       	rjmp	.+40     	; 0x17dc <time_dispaly+0x630>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b4:	6d 89       	ldd	r22, Y+21	; 0x15
    17b6:	7e 89       	ldd	r23, Y+22	; 0x16
    17b8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ba:	98 8d       	ldd	r25, Y+24	; 0x18
    17bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	9c 8b       	std	Y+20, r25	; 0x14
    17c6:	8b 8b       	std	Y+19, r24	; 0x13
    17c8:	8b 89       	ldd	r24, Y+19	; 0x13
    17ca:	9c 89       	ldd	r25, Y+20	; 0x14
    17cc:	98 8b       	std	Y+16, r25	; 0x10
    17ce:	8f 87       	std	Y+15, r24	; 0x0f
    17d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d2:	98 89       	ldd	r25, Y+16	; 0x10
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <time_dispaly+0x628>
    17d8:	98 8b       	std	Y+16, r25	; 0x10
    17da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	CLEAR_BIT(PORTA, PA4);
    17dc:	ab e3       	ldi	r26, 0x3B	; 59
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	eb e3       	ldi	r30, 0x3B	; 59
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8f 7e       	andi	r24, 0xEF	; 239
    17e8:	8c 93       	st	X, r24

	/*hours most significant digit display*/
	SET_BIT(PORTA, PA5);
    17ea:	ab e3       	ldi	r26, 0x3B	; 59
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	eb e3       	ldi	r30, 0x3B	; 59
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	80 62       	ori	r24, 0x20	; 32
    17f6:	8c 93       	st	X, r24
	PORTC = (PORTC & 0xF0) | (hr2 & 0x0F);
    17f8:	a5 e3       	ldi	r26, 0x35	; 53
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e5 e3       	ldi	r30, 0x35	; 53
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	98 2f       	mov	r25, r24
    1804:	90 7f       	andi	r25, 0xF0	; 240
    1806:	80 91 71 00 	lds	r24, 0x0071
    180a:	8f 70       	andi	r24, 0x0F	; 15
    180c:	89 2b       	or	r24, r25
    180e:	8c 93       	st	X, r24
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a0 e0       	ldi	r26, 0x00	; 0
    1816:	b0 e4       	ldi	r27, 0x40	; 64
    1818:	8b 87       	std	Y+11, r24	; 0x0b
    181a:	9c 87       	std	Y+12, r25	; 0x0c
    181c:	ad 87       	std	Y+13, r26	; 0x0d
    181e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1820:	6b 85       	ldd	r22, Y+11	; 0x0b
    1822:	7c 85       	ldd	r23, Y+12	; 0x0c
    1824:	8d 85       	ldd	r24, Y+13	; 0x0d
    1826:	9e 85       	ldd	r25, Y+14	; 0x0e
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	4a e7       	ldi	r20, 0x7A	; 122
    182e:	55 e4       	ldi	r21, 0x45	; 69
    1830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	8f 83       	std	Y+7, r24	; 0x07
    183a:	98 87       	std	Y+8, r25	; 0x08
    183c:	a9 87       	std	Y+9, r26	; 0x09
    183e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1840:	6f 81       	ldd	r22, Y+7	; 0x07
    1842:	78 85       	ldd	r23, Y+8	; 0x08
    1844:	89 85       	ldd	r24, Y+9	; 0x09
    1846:	9a 85       	ldd	r25, Y+10	; 0x0a
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e8       	ldi	r20, 0x80	; 128
    184e:	5f e3       	ldi	r21, 0x3F	; 63
    1850:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1854:	88 23       	and	r24, r24
    1856:	2c f4       	brge	.+10     	; 0x1862 <time_dispaly+0x6b6>
		__ticks = 1;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	8d 83       	std	Y+5, r24	; 0x05
    1860:	3f c0       	rjmp	.+126    	; 0x18e0 <time_dispaly+0x734>
	else if (__tmp > 65535)
    1862:	6f 81       	ldd	r22, Y+7	; 0x07
    1864:	78 85       	ldd	r23, Y+8	; 0x08
    1866:	89 85       	ldd	r24, Y+9	; 0x09
    1868:	9a 85       	ldd	r25, Y+10	; 0x0a
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	3f ef       	ldi	r19, 0xFF	; 255
    186e:	4f e7       	ldi	r20, 0x7F	; 127
    1870:	57 e4       	ldi	r21, 0x47	; 71
    1872:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1876:	18 16       	cp	r1, r24
    1878:	4c f5       	brge	.+82     	; 0x18cc <time_dispaly+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187a:	6b 85       	ldd	r22, Y+11	; 0x0b
    187c:	7c 85       	ldd	r23, Y+12	; 0x0c
    187e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1880:	9e 85       	ldd	r25, Y+14	; 0x0e
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e2       	ldi	r20, 0x20	; 32
    1888:	51 e4       	ldi	r21, 0x41	; 65
    188a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	bc 01       	movw	r22, r24
    1894:	cd 01       	movw	r24, r26
    1896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	9e 83       	std	Y+6, r25	; 0x06
    18a0:	8d 83       	std	Y+5, r24	; 0x05
    18a2:	0f c0       	rjmp	.+30     	; 0x18c2 <time_dispaly+0x716>
    18a4:	80 e9       	ldi	r24, 0x90	; 144
    18a6:	91 e0       	ldi	r25, 0x01	; 1
    18a8:	9c 83       	std	Y+4, r25	; 0x04
    18aa:	8b 83       	std	Y+3, r24	; 0x03
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	9c 81       	ldd	r25, Y+4	; 0x04
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <time_dispaly+0x704>
    18b4:	9c 83       	std	Y+4, r25	; 0x04
    18b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	9e 81       	ldd	r25, Y+6	; 0x06
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	9e 83       	std	Y+6, r25	; 0x06
    18c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	9e 81       	ldd	r25, Y+6	; 0x06
    18c6:	00 97       	sbiw	r24, 0x00	; 0
    18c8:	69 f7       	brne	.-38     	; 0x18a4 <time_dispaly+0x6f8>
    18ca:	14 c0       	rjmp	.+40     	; 0x18f4 <time_dispaly+0x748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18cc:	6f 81       	ldd	r22, Y+7	; 0x07
    18ce:	78 85       	ldd	r23, Y+8	; 0x08
    18d0:	89 85       	ldd	r24, Y+9	; 0x09
    18d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	9e 83       	std	Y+6, r25	; 0x06
    18de:	8d 83       	std	Y+5, r24	; 0x05
    18e0:	8d 81       	ldd	r24, Y+5	; 0x05
    18e2:	9e 81       	ldd	r25, Y+6	; 0x06
    18e4:	9a 83       	std	Y+2, r25	; 0x02
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	9a 81       	ldd	r25, Y+2	; 0x02
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <time_dispaly+0x740>
    18f0:	9a 83       	std	Y+2, r25	; 0x02
    18f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLEAR_BIT(PORTA, PA5);
    18f4:	ab e3       	ldi	r26, 0x3B	; 59
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	eb e3       	ldi	r30, 0x3B	; 59
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	8f 7d       	andi	r24, 0xDF	; 223
    1900:	8c 93       	st	X, r24
}
    1902:	cc 5a       	subi	r28, 0xAC	; 172
    1904:	df 4f       	sbci	r29, 0xFF	; 255
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	08 95       	ret

0000191a <main>:
int main()
{
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	c9 5a       	subi	r28, 0xA9	; 169
    1928:	d0 40       	sbci	r29, 0x00	; 0
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
	/*set I-bit to allow interrupts*/
	SET_BIT(SREG,7);
    1934:	af e5       	ldi	r26, 0x5F	; 95
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	ef e5       	ldi	r30, 0x5F	; 95
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	80 68       	ori	r24, 0x80	; 128
    1940:	8c 93       	st	X, r24

	/*set the direction of the first 4 pins in port C to output*/
	/*7-segment display pins*/
	DDRC |= 0x0F;
    1942:	a4 e3       	ldi	r26, 0x34	; 52
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e4 e3       	ldi	r30, 0x34	; 52
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8f 60       	ori	r24, 0x0F	; 15
    194e:	8c 93       	st	X, r24

	/*set the direction of the first 6 pins in port A to output*/
	/*7-segment enable pins*/
	DDRA |= 0x3F;
    1950:	aa e3       	ldi	r26, 0x3A	; 58
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	ea e3       	ldi	r30, 0x3A	; 58
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	8f 63       	ori	r24, 0x3F	; 63
    195c:	8c 93       	st	X, r24

	/*clear the first 6 pins in port A (initial value)*/
	PORTA &= 0xC0;
    195e:	ab e3       	ldi	r26, 0x3B	; 59
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	eb e3       	ldi	r30, 0x3B	; 59
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	80 7c       	andi	r24, 0xC0	; 192
    196a:	8c 93       	st	X, r24

	/*counting mode toggle button pin configuration*/
	/*set the direction of the pin PB7 pin in port B to input*/
	CLEAR_BIT(DDRB, PB7);
    196c:	a7 e3       	ldi	r26, 0x37	; 55
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e7 e3       	ldi	r30, 0x37	; 55
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8f 77       	andi	r24, 0x7F	; 127
    1978:	8c 93       	st	X, r24
	/*activate internal pull-up resistor for PB2*/
	SET_BIT(PORTB, PB7);
    197a:	a8 e3       	ldi	r26, 0x38	; 56
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e8 e3       	ldi	r30, 0x38	; 56
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	80 68       	ori	r24, 0x80	; 128
    1986:	8c 93       	st	X, r24

	/*counting mode leds configuration*/
	/*red led indicates counting up mode*/
	/*set the direction of the pin PD4 pin in port D to output*/
	SET_BIT(DDRD, PD4);
    1988:	a1 e3       	ldi	r26, 0x31	; 49
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e1 e3       	ldi	r30, 0x31	; 49
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	80 61       	ori	r24, 0x10	; 16
    1994:	8c 93       	st	X, r24
	/*clear the pin PD4 in port D (initial value)*/
	CLEAR_BIT(PORTD, PD4);
    1996:	a2 e3       	ldi	r26, 0x32	; 50
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e2 e3       	ldi	r30, 0x32	; 50
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	8f 7e       	andi	r24, 0xEF	; 239
    19a2:	8c 93       	st	X, r24

	/*yellow led indicates counting down mode*/
	/*set the direction of the pin PD5 pin in port D to output*/
	SET_BIT(DDRD, PD5);
    19a4:	a1 e3       	ldi	r26, 0x31	; 49
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e1 e3       	ldi	r30, 0x31	; 49
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	80 62       	ori	r24, 0x20	; 32
    19b0:	8c 93       	st	X, r24
	/*clear the pin PD5 in port D (initial value)*/
	CLEAR_BIT(PORTD, PD5);
    19b2:	a2 e3       	ldi	r26, 0x32	; 50
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e2 e3       	ldi	r30, 0x32	; 50
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8f 7d       	andi	r24, 0xDF	; 223
    19be:	8c 93       	st	X, r24

	/*count down start time adjusting buttons configuration*/
	/*hours decrement button*/
	/*set the direction of the pin PB0 pin in port B to input*/
	CLEAR_BIT(DDRB, PB0);
    19c0:	a7 e3       	ldi	r26, 0x37	; 55
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e7 e3       	ldi	r30, 0x37	; 55
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	8e 7f       	andi	r24, 0xFE	; 254
    19cc:	8c 93       	st	X, r24
	/*activate internal pull-up resistor for PB0*/
	SET_BIT(PORTB, PB0);
    19ce:	a8 e3       	ldi	r26, 0x38	; 56
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e8 e3       	ldi	r30, 0x38	; 56
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	81 60       	ori	r24, 0x01	; 1
    19da:	8c 93       	st	X, r24

	/*hours increment button*/
	/*set the direction of the pin PB1 pin in port B to input*/
	CLEAR_BIT(DDRB, PB1);
    19dc:	a7 e3       	ldi	r26, 0x37	; 55
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e7 e3       	ldi	r30, 0x37	; 55
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	8d 7f       	andi	r24, 0xFD	; 253
    19e8:	8c 93       	st	X, r24
	/*activate internal pull-up resistor for PB1*/
	SET_BIT(PORTB, PB1);
    19ea:	a8 e3       	ldi	r26, 0x38	; 56
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e8 e3       	ldi	r30, 0x38	; 56
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	82 60       	ori	r24, 0x02	; 2
    19f6:	8c 93       	st	X, r24

	/*minutes decrement button*/
	/*set the direction of the pin PB3 pin in port B to input*/
	CLEAR_BIT(DDRB, PB3);
    19f8:	a7 e3       	ldi	r26, 0x37	; 55
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e7 e3       	ldi	r30, 0x37	; 55
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	87 7f       	andi	r24, 0xF7	; 247
    1a04:	8c 93       	st	X, r24
	/*activate internal pull-up resistor for PB3*/
	SET_BIT(PORTB, PB3);
    1a06:	a8 e3       	ldi	r26, 0x38	; 56
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e8 e3       	ldi	r30, 0x38	; 56
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	88 60       	ori	r24, 0x08	; 8
    1a12:	8c 93       	st	X, r24

	/*minutes increment button*/
	/*set the direction of the pin PB4 pin in port B to input*/
	CLEAR_BIT(DDRB, PB4);
    1a14:	a7 e3       	ldi	r26, 0x37	; 55
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e7 e3       	ldi	r30, 0x37	; 55
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	8f 7e       	andi	r24, 0xEF	; 239
    1a20:	8c 93       	st	X, r24
	/*activate internal pull-up resistor for PB4*/
	SET_BIT(PORTB, PB4);
    1a22:	a8 e3       	ldi	r26, 0x38	; 56
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e8 e3       	ldi	r30, 0x38	; 56
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	80 61       	ori	r24, 0x10	; 16
    1a2e:	8c 93       	st	X, r24

	/*seconds decrement button*/
	/*set the direction of the pin PB5 pin in port B to input*/
	CLEAR_BIT(DDRB, PB5);
    1a30:	a7 e3       	ldi	r26, 0x37	; 55
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e7 e3       	ldi	r30, 0x37	; 55
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	8f 7d       	andi	r24, 0xDF	; 223
    1a3c:	8c 93       	st	X, r24
	/*activate internal pull-up resistor for PB5*/
	SET_BIT(PORTB, PB5);
    1a3e:	a8 e3       	ldi	r26, 0x38	; 56
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e8 e3       	ldi	r30, 0x38	; 56
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	80 62       	ori	r24, 0x20	; 32
    1a4a:	8c 93       	st	X, r24

	/*seconds increment button*/
	/*set the direction of the pin PB6 pin in port B to input*/
	CLEAR_BIT(DDRB, PB6);
    1a4c:	a7 e3       	ldi	r26, 0x37	; 55
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e7 e3       	ldi	r30, 0x37	; 55
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	8f 7b       	andi	r24, 0xBF	; 191
    1a58:	8c 93       	st	X, r24
	/*activate internal pull-up resistor for PB6*/
	SET_BIT(PORTB, PB6);
    1a5a:	a8 e3       	ldi	r26, 0x38	; 56
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e8 e3       	ldi	r30, 0x38	; 56
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	80 64       	ori	r24, 0x40	; 64
    1a66:	8c 93       	st	X, r24

	/*buzzer pin configuration*/
	/*set the direction of the pin PD0 pin in port D to output*/
	SET_BIT(DDRD, PD0);
    1a68:	a1 e3       	ldi	r26, 0x31	; 49
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e1 e3       	ldi	r30, 0x31	; 49
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	81 60       	ori	r24, 0x01	; 1
    1a74:	8c 93       	st	X, r24
	/*clear the pin PD0 in port D (initial value)*/
	CLEAR_BIT(PORTD, PD0);
    1a76:	a2 e3       	ldi	r26, 0x32	; 50
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e2 e3       	ldi	r30, 0x32	; 50
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	8e 7f       	andi	r24, 0xFE	; 254
    1a82:	8c 93       	st	X, r24

	time_handle();
    1a84:	0e 94 a8 07 	call	0xf50	; 0xf50 <time_handle>

	/*timer 1 initialization to compare mode*/
	timer1_ctc_init();
    1a88:	0e 94 04 07 	call	0xe08	; 0xe08 <timer1_ctc_init>


	/*external interrupt 0 initialization*/
	external_int0_init();
    1a8c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <external_int0_init>

	/*external interrupt 1 initialization*/
	external_int1_init();
    1a90:	0e 94 62 07 	call	0xec4	; 0xec4 <external_int1_init>

	/*external interrupt 2 initialization*/
	external_int2_init();
    1a94:	0e 94 85 07 	call	0xf0a	; 0xf0a <external_int2_init>

	while(1)
	{
		time_dispaly();
    1a98:	0e 94 d6 08 	call	0x11ac	; 0x11ac <time_dispaly>

		/*counting mode leds handling*/
		if(mode_toggle == 0)
    1a9c:	80 91 72 00 	lds	r24, 0x0072
    1aa0:	88 23       	and	r24, r24
    1aa2:	79 f4       	brne	.+30     	; 0x1ac2 <main+0x1a8>
		{
			/*turn off the yellow led*/
			CLEAR_BIT(PORTD, PD5);
    1aa4:	a2 e3       	ldi	r26, 0x32	; 50
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e2 e3       	ldi	r30, 0x32	; 50
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	8f 7d       	andi	r24, 0xDF	; 223
    1ab0:	8c 93       	st	X, r24
			/*turn on the red led (counting up mode)*/
			SET_BIT(PORTD, PD4);
    1ab2:	a2 e3       	ldi	r26, 0x32	; 50
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e2 e3       	ldi	r30, 0x32	; 50
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	80 61       	ori	r24, 0x10	; 16
    1abe:	8c 93       	st	X, r24
    1ac0:	0e c0       	rjmp	.+28     	; 0x1ade <main+0x1c4>
		}
		else
		{
			/*turn off the red led*/
			CLEAR_BIT(PORTD, PD4);
    1ac2:	a2 e3       	ldi	r26, 0x32	; 50
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e2 e3       	ldi	r30, 0x32	; 50
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8f 7e       	andi	r24, 0xEF	; 239
    1ace:	8c 93       	st	X, r24
			/*turn on the yellow led (counting down mode)*/
			SET_BIT(PORTD, PD5);
    1ad0:	a2 e3       	ldi	r26, 0x32	; 50
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e2 e3       	ldi	r30, 0x32	; 50
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	80 62       	ori	r24, 0x20	; 32
    1adc:	8c 93       	st	X, r24
		}

		/*if counting mode toggle button is pressed*/
		/*pressed -> PB7 in PINB = 0*/
		if(BIT_IS_CLEAR(PINB, PB7))
    1ade:	e6 e3       	ldi	r30, 0x36	; 54
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	88 23       	and	r24, r24
    1ae6:	0c f4       	brge	.+2      	; 0x1aea <main+0x1d0>
    1ae8:	50 c1       	rjmp	.+672    	; 0x1d8a <main+0x470>
    1aea:	fe 01       	movw	r30, r28
    1aec:	eb 55       	subi	r30, 0x5B	; 91
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a0 ef       	ldi	r26, 0xF0	; 240
    1af6:	b1 e4       	ldi	r27, 0x41	; 65
    1af8:	80 83       	st	Z, r24
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	a2 83       	std	Z+2, r26	; 0x02
    1afe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b00:	8e 01       	movw	r16, r28
    1b02:	0f 55       	subi	r16, 0x5F	; 95
    1b04:	1f 4f       	sbci	r17, 0xFF	; 255
    1b06:	fe 01       	movw	r30, r28
    1b08:	eb 55       	subi	r30, 0x5B	; 91
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	2b ea       	ldi	r18, 0xAB	; 171
    1b16:	3a ea       	ldi	r19, 0xAA	; 170
    1b18:	4a ea       	ldi	r20, 0xAA	; 170
    1b1a:	50 e4       	ldi	r21, 0x40	; 64
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	f8 01       	movw	r30, r16
    1b26:	80 83       	st	Z, r24
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	a2 83       	std	Z+2, r26	; 0x02
    1b2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b2e:	fe 01       	movw	r30, r28
    1b30:	ef 55       	subi	r30, 0x5F	; 95
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	60 81       	ld	r22, Z
    1b36:	71 81       	ldd	r23, Z+1	; 0x01
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e8       	ldi	r20, 0x80	; 128
    1b42:	5f e3       	ldi	r21, 0x3F	; 63
    1b44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b48:	88 23       	and	r24, r24
    1b4a:	34 f4       	brge	.+12     	; 0x1b58 <main+0x23e>
		__ticks = 1;
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	e0 56       	subi	r30, 0x60	; 96
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	80 83       	st	Z, r24
    1b56:	e0 c0       	rjmp	.+448    	; 0x1d18 <main+0x3fe>
	else if (__tmp > 255)
    1b58:	fe 01       	movw	r30, r28
    1b5a:	ef 55       	subi	r30, 0x5F	; 95
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	60 81       	ld	r22, Z
    1b60:	71 81       	ldd	r23, Z+1	; 0x01
    1b62:	82 81       	ldd	r24, Z+2	; 0x02
    1b64:	93 81       	ldd	r25, Z+3	; 0x03
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	4f e7       	ldi	r20, 0x7F	; 127
    1b6c:	53 e4       	ldi	r21, 0x43	; 67
    1b6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b72:	18 16       	cp	r1, r24
    1b74:	0c f0       	brlt	.+2      	; 0x1b78 <main+0x25e>
    1b76:	c0 c0       	rjmp	.+384    	; 0x1cf8 <main+0x3de>
	{
		_delay_ms(__us / 1000.0);
    1b78:	fe 01       	movw	r30, r28
    1b7a:	eb 55       	subi	r30, 0x5B	; 91
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	60 81       	ld	r22, Z
    1b80:	71 81       	ldd	r23, Z+1	; 0x01
    1b82:	82 81       	ldd	r24, Z+2	; 0x02
    1b84:	93 81       	ldd	r25, Z+3	; 0x03
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	4a e7       	ldi	r20, 0x7A	; 122
    1b8c:	54 e4       	ldi	r21, 0x44	; 68
    1b8e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	fe 01       	movw	r30, r28
    1b98:	e4 56       	subi	r30, 0x64	; 100
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	80 83       	st	Z, r24
    1b9e:	91 83       	std	Z+1, r25	; 0x01
    1ba0:	a2 83       	std	Z+2, r26	; 0x02
    1ba2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba4:	8e 01       	movw	r16, r28
    1ba6:	08 56       	subi	r16, 0x68	; 104
    1ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    1baa:	fe 01       	movw	r30, r28
    1bac:	e4 56       	subi	r30, 0x64	; 100
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	60 81       	ld	r22, Z
    1bb2:	71 81       	ldd	r23, Z+1	; 0x01
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	4a e7       	ldi	r20, 0x7A	; 122
    1bbe:	55 e4       	ldi	r21, 0x45	; 69
    1bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	f8 01       	movw	r30, r16
    1bca:	80 83       	st	Z, r24
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	a2 83       	std	Z+2, r26	; 0x02
    1bd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e8 56       	subi	r30, 0x68	; 104
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	60 81       	ld	r22, Z
    1bda:	71 81       	ldd	r23, Z+1	; 0x01
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bec:	88 23       	and	r24, r24
    1bee:	44 f4       	brge	.+16     	; 0x1c00 <main+0x2e6>
		__ticks = 1;
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	ea 56       	subi	r30, 0x6A	; 106
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	80 83       	st	Z, r24
    1bfe:	64 c0       	rjmp	.+200    	; 0x1cc8 <main+0x3ae>
	else if (__tmp > 65535)
    1c00:	fe 01       	movw	r30, r28
    1c02:	e8 56       	subi	r30, 0x68	; 104
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	60 81       	ld	r22, Z
    1c08:	71 81       	ldd	r23, Z+1	; 0x01
    1c0a:	82 81       	ldd	r24, Z+2	; 0x02
    1c0c:	93 81       	ldd	r25, Z+3	; 0x03
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	57 e4       	ldi	r21, 0x47	; 71
    1c16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	0c f0       	brlt	.+2      	; 0x1c20 <main+0x306>
    1c1e:	43 c0       	rjmp	.+134    	; 0x1ca6 <main+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c20:	fe 01       	movw	r30, r28
    1c22:	e4 56       	subi	r30, 0x64	; 100
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	60 81       	ld	r22, Z
    1c28:	71 81       	ldd	r23, Z+1	; 0x01
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
    1c2c:	93 81       	ldd	r25, Z+3	; 0x03
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	8e 01       	movw	r16, r28
    1c40:	0a 56       	subi	r16, 0x6A	; 106
    1c42:	1f 4f       	sbci	r17, 0xFF	; 255
    1c44:	bc 01       	movw	r22, r24
    1c46:	cd 01       	movw	r24, r26
    1c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	f8 01       	movw	r30, r16
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
    1c56:	1f c0       	rjmp	.+62     	; 0x1c96 <main+0x37c>
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ec 56       	subi	r30, 0x6C	; 108
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 e9       	ldi	r24, 0x90	; 144
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	80 83       	st	Z, r24
    1c66:	fe 01       	movw	r30, r28
    1c68:	ec 56       	subi	r30, 0x6C	; 108
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	80 81       	ld	r24, Z
    1c6e:	91 81       	ldd	r25, Z+1	; 0x01
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <main+0x356>
    1c74:	fe 01       	movw	r30, r28
    1c76:	ec 56       	subi	r30, 0x6C	; 108
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	91 83       	std	Z+1, r25	; 0x01
    1c7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	de 01       	movw	r26, r28
    1c80:	aa 56       	subi	r26, 0x6A	; 106
    1c82:	bf 4f       	sbci	r27, 0xFF	; 255
    1c84:	fe 01       	movw	r30, r28
    1c86:	ea 56       	subi	r30, 0x6A	; 106
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	80 81       	ld	r24, Z
    1c8c:	91 81       	ldd	r25, Z+1	; 0x01
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	11 96       	adiw	r26, 0x01	; 1
    1c92:	9c 93       	st	X, r25
    1c94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c96:	fe 01       	movw	r30, r28
    1c98:	ea 56       	subi	r30, 0x6A	; 106
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	80 81       	ld	r24, Z
    1c9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	d1 f6       	brne	.-76     	; 0x1c58 <main+0x33e>
    1ca4:	4b c0       	rjmp	.+150    	; 0x1d3c <main+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca6:	8e 01       	movw	r16, r28
    1ca8:	0a 56       	subi	r16, 0x6A	; 106
    1caa:	1f 4f       	sbci	r17, 0xFF	; 255
    1cac:	fe 01       	movw	r30, r28
    1cae:	e8 56       	subi	r30, 0x68	; 104
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	60 81       	ld	r22, Z
    1cb4:	71 81       	ldd	r23, Z+1	; 0x01
    1cb6:	82 81       	ldd	r24, Z+2	; 0x02
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	91 83       	std	Z+1, r25	; 0x01
    1cc6:	80 83       	st	Z, r24
    1cc8:	de 01       	movw	r26, r28
    1cca:	ae 56       	subi	r26, 0x6E	; 110
    1ccc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cce:	fe 01       	movw	r30, r28
    1cd0:	ea 56       	subi	r30, 0x6A	; 106
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	80 81       	ld	r24, Z
    1cd6:	91 81       	ldd	r25, Z+1	; 0x01
    1cd8:	11 96       	adiw	r26, 0x01	; 1
    1cda:	9c 93       	st	X, r25
    1cdc:	8e 93       	st	-X, r24
    1cde:	fe 01       	movw	r30, r28
    1ce0:	ee 56       	subi	r30, 0x6E	; 110
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 81       	ld	r24, Z
    1ce6:	91 81       	ldd	r25, Z+1	; 0x01
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <main+0x3ce>
    1cec:	fe 01       	movw	r30, r28
    1cee:	ee 56       	subi	r30, 0x6E	; 110
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	91 83       	std	Z+1, r25	; 0x01
    1cf4:	80 83       	st	Z, r24
    1cf6:	22 c0       	rjmp	.+68     	; 0x1d3c <main+0x422>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cf8:	8e 01       	movw	r16, r28
    1cfa:	00 56       	subi	r16, 0x60	; 96
    1cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfe:	fe 01       	movw	r30, r28
    1d00:	ef 55       	subi	r30, 0x5F	; 95
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	60 81       	ld	r22, Z
    1d06:	71 81       	ldd	r23, Z+1	; 0x01
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	f8 01       	movw	r30, r16
    1d16:	80 83       	st	Z, r24
    1d18:	de 01       	movw	r26, r28
    1d1a:	af 56       	subi	r26, 0x6F	; 111
    1d1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e0 56       	subi	r30, 0x60	; 96
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	80 81       	ld	r24, Z
    1d26:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ef 56       	subi	r30, 0x6F	; 111
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	8a 95       	dec	r24
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <main+0x416>
    1d34:	fe 01       	movw	r30, r28
    1d36:	ef 56       	subi	r30, 0x6F	; 111
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 83       	st	Z, r24
		{
			_delay_us(30);
			if(BIT_IS_CLEAR(PINB, PB7) && paused)
    1d3c:	e6 e3       	ldi	r30, 0x36	; 54
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	88 23       	and	r24, r24
    1d44:	24 f1       	brlt	.+72     	; 0x1d8e <main+0x474>
    1d46:	80 91 73 00 	lds	r24, 0x0073
    1d4a:	88 23       	and	r24, r24
    1d4c:	01 f1       	breq	.+64     	; 0x1d8e <main+0x474>
			{
				if(mode_toggle_button == 0)
    1d4e:	80 91 74 00 	lds	r24, 0x0074
    1d52:	88 23       	and	r24, r24
    1d54:	e1 f4       	brne	.+56     	; 0x1d8e <main+0x474>
				{
					mode_toggle = !mode_toggle;
    1d56:	80 91 72 00 	lds	r24, 0x0072
    1d5a:	c7 55       	subi	r28, 0x57	; 87
    1d5c:	df 4f       	sbci	r29, 0xFF	; 255
    1d5e:	18 82       	st	Y, r1
    1d60:	c9 5a       	subi	r28, 0xA9	; 169
    1d62:	d0 40       	sbci	r29, 0x00	; 0
    1d64:	88 23       	and	r24, r24
    1d66:	31 f4       	brne	.+12     	; 0x1d74 <main+0x45a>
    1d68:	f1 e0       	ldi	r31, 0x01	; 1
    1d6a:	c7 55       	subi	r28, 0x57	; 87
    1d6c:	df 4f       	sbci	r29, 0xFF	; 255
    1d6e:	f8 83       	st	Y, r31
    1d70:	c9 5a       	subi	r28, 0xA9	; 169
    1d72:	d0 40       	sbci	r29, 0x00	; 0
    1d74:	c7 55       	subi	r28, 0x57	; 87
    1d76:	df 4f       	sbci	r29, 0xFF	; 255
    1d78:	28 81       	ld	r18, Y
    1d7a:	c9 5a       	subi	r28, 0xA9	; 169
    1d7c:	d0 40       	sbci	r29, 0x00	; 0
    1d7e:	20 93 72 00 	sts	0x0072, r18

					mode_toggle_button = 1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	80 93 74 00 	sts	0x0074, r24
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <main+0x474>
				}
			}
		}
		else
		{
			mode_toggle_button = 0;
    1d8a:	10 92 74 00 	sts	0x0074, r1
		}

		/*if hours decrement button is pressed*/
		/*pressed -> PB0 in PINB = 0*/
		if(BIT_IS_CLEAR(PINB, PB0))
    1d8e:	e6 e3       	ldi	r30, 0x36	; 54
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	88 2f       	mov	r24, r24
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	81 70       	andi	r24, 0x01	; 1
    1d9a:	90 70       	andi	r25, 0x00	; 0
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <main+0x488>
    1da0:	62 c1       	rjmp	.+708    	; 0x2066 <main+0x74c>
    1da2:	fe 01       	movw	r30, r28
    1da4:	e3 57       	subi	r30, 0x73	; 115
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 ef       	ldi	r26, 0xF0	; 240
    1dae:	b1 e4       	ldi	r27, 0x41	; 65
    1db0:	80 83       	st	Z, r24
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	a2 83       	std	Z+2, r26	; 0x02
    1db6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1db8:	8e 01       	movw	r16, r28
    1dba:	07 57       	subi	r16, 0x77	; 119
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e3 57       	subi	r30, 0x73	; 115
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	2b ea       	ldi	r18, 0xAB	; 171
    1dce:	3a ea       	ldi	r19, 0xAA	; 170
    1dd0:	4a ea       	ldi	r20, 0xAA	; 170
    1dd2:	50 e4       	ldi	r21, 0x40	; 64
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	f8 01       	movw	r30, r16
    1dde:	80 83       	st	Z, r24
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	a2 83       	std	Z+2, r26	; 0x02
    1de4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1de6:	fe 01       	movw	r30, r28
    1de8:	e7 57       	subi	r30, 0x77	; 119
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e8       	ldi	r20, 0x80	; 128
    1dfa:	5f e3       	ldi	r21, 0x3F	; 63
    1dfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e00:	88 23       	and	r24, r24
    1e02:	34 f4       	brge	.+12     	; 0x1e10 <main+0x4f6>
		__ticks = 1;
    1e04:	fe 01       	movw	r30, r28
    1e06:	e8 57       	subi	r30, 0x78	; 120
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	80 83       	st	Z, r24
    1e0e:	e0 c0       	rjmp	.+448    	; 0x1fd0 <main+0x6b6>
	else if (__tmp > 255)
    1e10:	fe 01       	movw	r30, r28
    1e12:	e7 57       	subi	r30, 0x77	; 119
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	60 81       	ld	r22, Z
    1e18:	71 81       	ldd	r23, Z+1	; 0x01
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	93 81       	ldd	r25, Z+3	; 0x03
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	4f e7       	ldi	r20, 0x7F	; 127
    1e24:	53 e4       	ldi	r21, 0x43	; 67
    1e26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e2a:	18 16       	cp	r1, r24
    1e2c:	0c f0       	brlt	.+2      	; 0x1e30 <main+0x516>
    1e2e:	c0 c0       	rjmp	.+384    	; 0x1fb0 <main+0x696>
	{
		_delay_ms(__us / 1000.0);
    1e30:	fe 01       	movw	r30, r28
    1e32:	e3 57       	subi	r30, 0x73	; 115
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	60 81       	ld	r22, Z
    1e38:	71 81       	ldd	r23, Z+1	; 0x01
    1e3a:	82 81       	ldd	r24, Z+2	; 0x02
    1e3c:	93 81       	ldd	r25, Z+3	; 0x03
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4a e7       	ldi	r20, 0x7A	; 122
    1e44:	54 e4       	ldi	r21, 0x44	; 68
    1e46:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	fe 01       	movw	r30, r28
    1e50:	ec 57       	subi	r30, 0x7C	; 124
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 83       	st	Z, r24
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	a2 83       	std	Z+2, r26	; 0x02
    1e5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5c:	8e 01       	movw	r16, r28
    1e5e:	00 58       	subi	r16, 0x80	; 128
    1e60:	1f 4f       	sbci	r17, 0xFF	; 255
    1e62:	fe 01       	movw	r30, r28
    1e64:	ec 57       	subi	r30, 0x7C	; 124
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	60 81       	ld	r22, Z
    1e6a:	71 81       	ldd	r23, Z+1	; 0x01
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a e7       	ldi	r20, 0x7A	; 122
    1e76:	55 e4       	ldi	r21, 0x45	; 69
    1e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	f8 01       	movw	r30, r16
    1e82:	80 83       	st	Z, r24
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	a2 83       	std	Z+2, r26	; 0x02
    1e88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e0 58       	subi	r30, 0x80	; 128
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	60 81       	ld	r22, Z
    1e92:	71 81       	ldd	r23, Z+1	; 0x01
    1e94:	82 81       	ldd	r24, Z+2	; 0x02
    1e96:	93 81       	ldd	r25, Z+3	; 0x03
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	44 f4       	brge	.+16     	; 0x1eb8 <main+0x59e>
		__ticks = 1;
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e2 58       	subi	r30, 0x82	; 130
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	91 83       	std	Z+1, r25	; 0x01
    1eb4:	80 83       	st	Z, r24
    1eb6:	64 c0       	rjmp	.+200    	; 0x1f80 <main+0x666>
	else if (__tmp > 65535)
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e0 58       	subi	r30, 0x80	; 128
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	60 81       	ld	r22, Z
    1ec0:	71 81       	ldd	r23, Z+1	; 0x01
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	3f ef       	ldi	r19, 0xFF	; 255
    1eca:	4f e7       	ldi	r20, 0x7F	; 127
    1ecc:	57 e4       	ldi	r21, 0x47	; 71
    1ece:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ed2:	18 16       	cp	r1, r24
    1ed4:	0c f0       	brlt	.+2      	; 0x1ed8 <main+0x5be>
    1ed6:	43 c0       	rjmp	.+134    	; 0x1f5e <main+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	fe 01       	movw	r30, r28
    1eda:	ec 57       	subi	r30, 0x7C	; 124
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	60 81       	ld	r22, Z
    1ee0:	71 81       	ldd	r23, Z+1	; 0x01
    1ee2:	82 81       	ldd	r24, Z+2	; 0x02
    1ee4:	93 81       	ldd	r25, Z+3	; 0x03
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	8e 01       	movw	r16, r28
    1ef8:	02 58       	subi	r16, 0x82	; 130
    1efa:	1f 4f       	sbci	r17, 0xFF	; 255
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	f8 01       	movw	r30, r16
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	80 83       	st	Z, r24
    1f0e:	1f c0       	rjmp	.+62     	; 0x1f4e <main+0x634>
    1f10:	fe 01       	movw	r30, r28
    1f12:	e4 58       	subi	r30, 0x84	; 132
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 e9       	ldi	r24, 0x90	; 144
    1f18:	91 e0       	ldi	r25, 0x01	; 1
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f1e:	fe 01       	movw	r30, r28
    1f20:	e4 58       	subi	r30, 0x84	; 132
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	80 81       	ld	r24, Z
    1f26:	91 81       	ldd	r25, Z+1	; 0x01
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <main+0x60e>
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e4 58       	subi	r30, 0x84	; 132
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	91 83       	std	Z+1, r25	; 0x01
    1f34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f36:	de 01       	movw	r26, r28
    1f38:	a2 58       	subi	r26, 0x82	; 130
    1f3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	e2 58       	subi	r30, 0x82	; 130
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	80 81       	ld	r24, Z
    1f44:	91 81       	ldd	r25, Z+1	; 0x01
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	11 96       	adiw	r26, 0x01	; 1
    1f4a:	9c 93       	st	X, r25
    1f4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e2 58       	subi	r30, 0x82	; 130
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	d1 f6       	brne	.-76     	; 0x1f10 <main+0x5f6>
    1f5c:	4b c0       	rjmp	.+150    	; 0x1ff4 <main+0x6da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5e:	8e 01       	movw	r16, r28
    1f60:	02 58       	subi	r16, 0x82	; 130
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	fe 01       	movw	r30, r28
    1f66:	e0 58       	subi	r30, 0x80	; 128
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	80 83       	st	Z, r24
    1f80:	de 01       	movw	r26, r28
    1f82:	a6 58       	subi	r26, 0x86	; 134
    1f84:	bf 4f       	sbci	r27, 0xFF	; 255
    1f86:	fe 01       	movw	r30, r28
    1f88:	e2 58       	subi	r30, 0x82	; 130
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 81       	ld	r24, Z
    1f8e:	91 81       	ldd	r25, Z+1	; 0x01
    1f90:	11 96       	adiw	r26, 0x01	; 1
    1f92:	9c 93       	st	X, r25
    1f94:	8e 93       	st	-X, r24
    1f96:	fe 01       	movw	r30, r28
    1f98:	e6 58       	subi	r30, 0x86	; 134
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <main+0x686>
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e6 58       	subi	r30, 0x86	; 134
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	80 83       	st	Z, r24
    1fae:	22 c0       	rjmp	.+68     	; 0x1ff4 <main+0x6da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fb0:	8e 01       	movw	r16, r28
    1fb2:	08 57       	subi	r16, 0x78	; 120
    1fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e7 57       	subi	r30, 0x77	; 119
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	60 81       	ld	r22, Z
    1fbe:	71 81       	ldd	r23, Z+1	; 0x01
    1fc0:	82 81       	ldd	r24, Z+2	; 0x02
    1fc2:	93 81       	ldd	r25, Z+3	; 0x03
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	f8 01       	movw	r30, r16
    1fce:	80 83       	st	Z, r24
    1fd0:	de 01       	movw	r26, r28
    1fd2:	a7 58       	subi	r26, 0x87	; 135
    1fd4:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e8 57       	subi	r30, 0x78	; 120
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	80 81       	ld	r24, Z
    1fde:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e7 58       	subi	r30, 0x87	; 135
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	80 81       	ld	r24, Z
    1fe8:	8a 95       	dec	r24
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <main+0x6ce>
    1fec:	fe 01       	movw	r30, r28
    1fee:	e7 58       	subi	r30, 0x87	; 135
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	80 83       	st	Z, r24
		{
			_delay_us(30);
			if(BIT_IS_CLEAR(PINB, PB0) && paused)
    1ff4:	e6 e3       	ldi	r30, 0x36	; 54
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	88 2f       	mov	r24, r24
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	81 70       	andi	r24, 0x01	; 1
    2000:	90 70       	andi	r25, 0x00	; 0
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	91 f5       	brne	.+100    	; 0x206a <main+0x750>
    2006:	80 91 73 00 	lds	r24, 0x0073
    200a:	88 23       	and	r24, r24
    200c:	71 f1       	breq	.+92     	; 0x206a <main+0x750>
			{
				if(hours_decrement_button == 0)
    200e:	80 91 75 00 	lds	r24, 0x0075
    2012:	88 23       	and	r24, r24
    2014:	51 f5       	brne	.+84     	; 0x206a <main+0x750>
				{
					/*make sure time is greater or equal one hour
					 * 60 * 60 = 3600
					 */
					if(time >= 3600)
    2016:	80 91 68 00 	lds	r24, 0x0068
    201a:	90 91 69 00 	lds	r25, 0x0069
    201e:	a0 91 6a 00 	lds	r26, 0x006A
    2022:	b0 91 6b 00 	lds	r27, 0x006B
    2026:	80 31       	cpi	r24, 0x10	; 16
    2028:	fe e0       	ldi	r31, 0x0E	; 14
    202a:	9f 07       	cpc	r25, r31
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	af 07       	cpc	r26, r31
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	bf 07       	cpc	r27, r31
    2034:	a0 f0       	brcs	.+40     	; 0x205e <main+0x744>
					{
						time = time - 3600;
    2036:	80 91 68 00 	lds	r24, 0x0068
    203a:	90 91 69 00 	lds	r25, 0x0069
    203e:	a0 91 6a 00 	lds	r26, 0x006A
    2042:	b0 91 6b 00 	lds	r27, 0x006B
    2046:	80 51       	subi	r24, 0x10	; 16
    2048:	9e 40       	sbci	r25, 0x0E	; 14
    204a:	a0 40       	sbci	r26, 0x00	; 0
    204c:	b0 40       	sbci	r27, 0x00	; 0
    204e:	80 93 68 00 	sts	0x0068, r24
    2052:	90 93 69 00 	sts	0x0069, r25
    2056:	a0 93 6a 00 	sts	0x006A, r26
    205a:	b0 93 6b 00 	sts	0x006B, r27
					}
					hours_decrement_button = 1;
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	80 93 75 00 	sts	0x0075, r24
    2064:	02 c0       	rjmp	.+4      	; 0x206a <main+0x750>
				}
			}
		}
		else
		{
			hours_decrement_button = 0;
    2066:	10 92 75 00 	sts	0x0075, r1
		}

		/*if hours increment button is pressed*/
		/*pressed -> PB0 in PINB = 1*/
		if(BIT_IS_CLEAR(PINB, PB1))
    206a:	e6 e3       	ldi	r30, 0x36	; 54
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	88 2f       	mov	r24, r24
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	82 70       	andi	r24, 0x02	; 2
    2076:	90 70       	andi	r25, 0x00	; 0
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	09 f0       	breq	.+2      	; 0x207e <main+0x764>
    207c:	62 c1       	rjmp	.+708    	; 0x2342 <main+0xa28>
    207e:	fe 01       	movw	r30, r28
    2080:	eb 58       	subi	r30, 0x8B	; 139
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	a0 ef       	ldi	r26, 0xF0	; 240
    208a:	b1 e4       	ldi	r27, 0x41	; 65
    208c:	80 83       	st	Z, r24
    208e:	91 83       	std	Z+1, r25	; 0x01
    2090:	a2 83       	std	Z+2, r26	; 0x02
    2092:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2094:	8e 01       	movw	r16, r28
    2096:	0f 58       	subi	r16, 0x8F	; 143
    2098:	1f 4f       	sbci	r17, 0xFF	; 255
    209a:	fe 01       	movw	r30, r28
    209c:	eb 58       	subi	r30, 0x8B	; 139
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	60 81       	ld	r22, Z
    20a2:	71 81       	ldd	r23, Z+1	; 0x01
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	93 81       	ldd	r25, Z+3	; 0x03
    20a8:	2b ea       	ldi	r18, 0xAB	; 171
    20aa:	3a ea       	ldi	r19, 0xAA	; 170
    20ac:	4a ea       	ldi	r20, 0xAA	; 170
    20ae:	50 e4       	ldi	r21, 0x40	; 64
    20b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	f8 01       	movw	r30, r16
    20ba:	80 83       	st	Z, r24
    20bc:	91 83       	std	Z+1, r25	; 0x01
    20be:	a2 83       	std	Z+2, r26	; 0x02
    20c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20c2:	fe 01       	movw	r30, r28
    20c4:	ef 58       	subi	r30, 0x8F	; 143
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	60 81       	ld	r22, Z
    20ca:	71 81       	ldd	r23, Z+1	; 0x01
    20cc:	82 81       	ldd	r24, Z+2	; 0x02
    20ce:	93 81       	ldd	r25, Z+3	; 0x03
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e8       	ldi	r20, 0x80	; 128
    20d6:	5f e3       	ldi	r21, 0x3F	; 63
    20d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20dc:	88 23       	and	r24, r24
    20de:	34 f4       	brge	.+12     	; 0x20ec <main+0x7d2>
		__ticks = 1;
    20e0:	fe 01       	movw	r30, r28
    20e2:	e0 59       	subi	r30, 0x90	; 144
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	80 83       	st	Z, r24
    20ea:	e0 c0       	rjmp	.+448    	; 0x22ac <main+0x992>
	else if (__tmp > 255)
    20ec:	fe 01       	movw	r30, r28
    20ee:	ef 58       	subi	r30, 0x8F	; 143
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4f e7       	ldi	r20, 0x7F	; 127
    2100:	53 e4       	ldi	r21, 0x43	; 67
    2102:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2106:	18 16       	cp	r1, r24
    2108:	0c f0       	brlt	.+2      	; 0x210c <main+0x7f2>
    210a:	c0 c0       	rjmp	.+384    	; 0x228c <main+0x972>
	{
		_delay_ms(__us / 1000.0);
    210c:	fe 01       	movw	r30, r28
    210e:	eb 58       	subi	r30, 0x8B	; 139
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	60 81       	ld	r22, Z
    2114:	71 81       	ldd	r23, Z+1	; 0x01
    2116:	82 81       	ldd	r24, Z+2	; 0x02
    2118:	93 81       	ldd	r25, Z+3	; 0x03
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	4a e7       	ldi	r20, 0x7A	; 122
    2120:	54 e4       	ldi	r21, 0x44	; 68
    2122:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	fe 01       	movw	r30, r28
    212c:	e4 59       	subi	r30, 0x94	; 148
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	80 83       	st	Z, r24
    2132:	91 83       	std	Z+1, r25	; 0x01
    2134:	a2 83       	std	Z+2, r26	; 0x02
    2136:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2138:	8e 01       	movw	r16, r28
    213a:	08 59       	subi	r16, 0x98	; 152
    213c:	1f 4f       	sbci	r17, 0xFF	; 255
    213e:	fe 01       	movw	r30, r28
    2140:	e4 59       	subi	r30, 0x94	; 148
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	60 81       	ld	r22, Z
    2146:	71 81       	ldd	r23, Z+1	; 0x01
    2148:	82 81       	ldd	r24, Z+2	; 0x02
    214a:	93 81       	ldd	r25, Z+3	; 0x03
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	4a e7       	ldi	r20, 0x7A	; 122
    2152:	55 e4       	ldi	r21, 0x45	; 69
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	f8 01       	movw	r30, r16
    215e:	80 83       	st	Z, r24
    2160:	91 83       	std	Z+1, r25	; 0x01
    2162:	a2 83       	std	Z+2, r26	; 0x02
    2164:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2166:	fe 01       	movw	r30, r28
    2168:	e8 59       	subi	r30, 0x98	; 152
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	60 81       	ld	r22, Z
    216e:	71 81       	ldd	r23, Z+1	; 0x01
    2170:	82 81       	ldd	r24, Z+2	; 0x02
    2172:	93 81       	ldd	r25, Z+3	; 0x03
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e8       	ldi	r20, 0x80	; 128
    217a:	5f e3       	ldi	r21, 0x3F	; 63
    217c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2180:	88 23       	and	r24, r24
    2182:	44 f4       	brge	.+16     	; 0x2194 <main+0x87a>
		__ticks = 1;
    2184:	fe 01       	movw	r30, r28
    2186:	ea 59       	subi	r30, 0x9A	; 154
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	80 83       	st	Z, r24
    2192:	64 c0       	rjmp	.+200    	; 0x225c <main+0x942>
	else if (__tmp > 65535)
    2194:	fe 01       	movw	r30, r28
    2196:	e8 59       	subi	r30, 0x98	; 152
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	60 81       	ld	r22, Z
    219c:	71 81       	ldd	r23, Z+1	; 0x01
    219e:	82 81       	ldd	r24, Z+2	; 0x02
    21a0:	93 81       	ldd	r25, Z+3	; 0x03
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	3f ef       	ldi	r19, 0xFF	; 255
    21a6:	4f e7       	ldi	r20, 0x7F	; 127
    21a8:	57 e4       	ldi	r21, 0x47	; 71
    21aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ae:	18 16       	cp	r1, r24
    21b0:	0c f0       	brlt	.+2      	; 0x21b4 <main+0x89a>
    21b2:	43 c0       	rjmp	.+134    	; 0x223a <main+0x920>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b4:	fe 01       	movw	r30, r28
    21b6:	e4 59       	subi	r30, 0x94	; 148
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	60 81       	ld	r22, Z
    21bc:	71 81       	ldd	r23, Z+1	; 0x01
    21be:	82 81       	ldd	r24, Z+2	; 0x02
    21c0:	93 81       	ldd	r25, Z+3	; 0x03
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e2       	ldi	r20, 0x20	; 32
    21c8:	51 e4       	ldi	r21, 0x41	; 65
    21ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	8e 01       	movw	r16, r28
    21d4:	0a 59       	subi	r16, 0x9A	; 154
    21d6:	1f 4f       	sbci	r17, 0xFF	; 255
    21d8:	bc 01       	movw	r22, r24
    21da:	cd 01       	movw	r24, r26
    21dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	f8 01       	movw	r30, r16
    21e6:	91 83       	std	Z+1, r25	; 0x01
    21e8:	80 83       	st	Z, r24
    21ea:	1f c0       	rjmp	.+62     	; 0x222a <main+0x910>
    21ec:	fe 01       	movw	r30, r28
    21ee:	ec 59       	subi	r30, 0x9C	; 156
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	80 e9       	ldi	r24, 0x90	; 144
    21f4:	91 e0       	ldi	r25, 0x01	; 1
    21f6:	91 83       	std	Z+1, r25	; 0x01
    21f8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21fa:	fe 01       	movw	r30, r28
    21fc:	ec 59       	subi	r30, 0x9C	; 156
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 81       	ld	r24, Z
    2202:	91 81       	ldd	r25, Z+1	; 0x01
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <main+0x8ea>
    2208:	fe 01       	movw	r30, r28
    220a:	ec 59       	subi	r30, 0x9C	; 156
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	91 83       	std	Z+1, r25	; 0x01
    2210:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2212:	de 01       	movw	r26, r28
    2214:	aa 59       	subi	r26, 0x9A	; 154
    2216:	bf 4f       	sbci	r27, 0xFF	; 255
    2218:	fe 01       	movw	r30, r28
    221a:	ea 59       	subi	r30, 0x9A	; 154
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	80 81       	ld	r24, Z
    2220:	91 81       	ldd	r25, Z+1	; 0x01
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	11 96       	adiw	r26, 0x01	; 1
    2226:	9c 93       	st	X, r25
    2228:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222a:	fe 01       	movw	r30, r28
    222c:	ea 59       	subi	r30, 0x9A	; 154
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	80 81       	ld	r24, Z
    2232:	91 81       	ldd	r25, Z+1	; 0x01
    2234:	00 97       	sbiw	r24, 0x00	; 0
    2236:	d1 f6       	brne	.-76     	; 0x21ec <main+0x8d2>
    2238:	4b c0       	rjmp	.+150    	; 0x22d0 <main+0x9b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223a:	8e 01       	movw	r16, r28
    223c:	0a 59       	subi	r16, 0x9A	; 154
    223e:	1f 4f       	sbci	r17, 0xFF	; 255
    2240:	fe 01       	movw	r30, r28
    2242:	e8 59       	subi	r30, 0x98	; 152
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	60 81       	ld	r22, Z
    2248:	71 81       	ldd	r23, Z+1	; 0x01
    224a:	82 81       	ldd	r24, Z+2	; 0x02
    224c:	93 81       	ldd	r25, Z+3	; 0x03
    224e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	f8 01       	movw	r30, r16
    2258:	91 83       	std	Z+1, r25	; 0x01
    225a:	80 83       	st	Z, r24
    225c:	de 01       	movw	r26, r28
    225e:	ae 59       	subi	r26, 0x9E	; 158
    2260:	bf 4f       	sbci	r27, 0xFF	; 255
    2262:	fe 01       	movw	r30, r28
    2264:	ea 59       	subi	r30, 0x9A	; 154
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 81       	ld	r24, Z
    226a:	91 81       	ldd	r25, Z+1	; 0x01
    226c:	11 96       	adiw	r26, 0x01	; 1
    226e:	9c 93       	st	X, r25
    2270:	8e 93       	st	-X, r24
    2272:	fe 01       	movw	r30, r28
    2274:	ee 59       	subi	r30, 0x9E	; 158
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <main+0x962>
    2280:	fe 01       	movw	r30, r28
    2282:	ee 59       	subi	r30, 0x9E	; 158
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	80 83       	st	Z, r24
    228a:	22 c0       	rjmp	.+68     	; 0x22d0 <main+0x9b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    228c:	8e 01       	movw	r16, r28
    228e:	00 59       	subi	r16, 0x90	; 144
    2290:	1f 4f       	sbci	r17, 0xFF	; 255
    2292:	fe 01       	movw	r30, r28
    2294:	ef 58       	subi	r30, 0x8F	; 143
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	f8 01       	movw	r30, r16
    22aa:	80 83       	st	Z, r24
    22ac:	de 01       	movw	r26, r28
    22ae:	af 59       	subi	r26, 0x9F	; 159
    22b0:	bf 4f       	sbci	r27, 0xFF	; 255
    22b2:	fe 01       	movw	r30, r28
    22b4:	e0 59       	subi	r30, 0x90	; 144
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 81       	ld	r24, Z
    22ba:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22bc:	fe 01       	movw	r30, r28
    22be:	ef 59       	subi	r30, 0x9F	; 159
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	8a 95       	dec	r24
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <main+0x9aa>
    22c8:	fe 01       	movw	r30, r28
    22ca:	ef 59       	subi	r30, 0x9F	; 159
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	80 83       	st	Z, r24
		{
			_delay_us(30);
			if(BIT_IS_CLEAR(PINB, PB1) && paused)
    22d0:	e6 e3       	ldi	r30, 0x36	; 54
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	88 2f       	mov	r24, r24
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	82 70       	andi	r24, 0x02	; 2
    22dc:	90 70       	andi	r25, 0x00	; 0
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	91 f5       	brne	.+100    	; 0x2346 <main+0xa2c>
    22e2:	80 91 73 00 	lds	r24, 0x0073
    22e6:	88 23       	and	r24, r24
    22e8:	71 f1       	breq	.+92     	; 0x2346 <main+0xa2c>
			{
				if(hours_increment_button == 0)
    22ea:	80 91 76 00 	lds	r24, 0x0076
    22ee:	88 23       	and	r24, r24
    22f0:	51 f5       	brne	.+84     	; 0x2346 <main+0xa2c>
				{
					/*make sure time has room for one more hour
					 * 99 * 60 * 60 = 356400
					 */
					if(time< 356400)
    22f2:	80 91 68 00 	lds	r24, 0x0068
    22f6:	90 91 69 00 	lds	r25, 0x0069
    22fa:	a0 91 6a 00 	lds	r26, 0x006A
    22fe:	b0 91 6b 00 	lds	r27, 0x006B
    2302:	80 33       	cpi	r24, 0x30	; 48
    2304:	f0 e7       	ldi	r31, 0x70	; 112
    2306:	9f 07       	cpc	r25, r31
    2308:	f5 e0       	ldi	r31, 0x05	; 5
    230a:	af 07       	cpc	r26, r31
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	bf 07       	cpc	r27, r31
    2310:	a0 f4       	brcc	.+40     	; 0x233a <main+0xa20>
					{
						time = time +3600;
    2312:	80 91 68 00 	lds	r24, 0x0068
    2316:	90 91 69 00 	lds	r25, 0x0069
    231a:	a0 91 6a 00 	lds	r26, 0x006A
    231e:	b0 91 6b 00 	lds	r27, 0x006B
    2322:	80 5f       	subi	r24, 0xF0	; 240
    2324:	91 4f       	sbci	r25, 0xF1	; 241
    2326:	af 4f       	sbci	r26, 0xFF	; 255
    2328:	bf 4f       	sbci	r27, 0xFF	; 255
    232a:	80 93 68 00 	sts	0x0068, r24
    232e:	90 93 69 00 	sts	0x0069, r25
    2332:	a0 93 6a 00 	sts	0x006A, r26
    2336:	b0 93 6b 00 	sts	0x006B, r27
					}

					hours_increment_button = 1;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	80 93 76 00 	sts	0x0076, r24
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <main+0xa2c>
				}
			}
		}
		else
		{
			hours_increment_button = 0;
    2342:	10 92 76 00 	sts	0x0076, r1
		}

		/*if minutes decrement button is pressed*/
		/*pressed -> PB3 in PINB = 0*/
		if(BIT_IS_CLEAR(PINB, PB3))
    2346:	e6 e3       	ldi	r30, 0x36	; 54
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	88 2f       	mov	r24, r24
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	88 70       	andi	r24, 0x08	; 8
    2352:	90 70       	andi	r25, 0x00	; 0
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	09 f0       	breq	.+2      	; 0x235a <main+0xa40>
    2358:	5e c1       	rjmp	.+700    	; 0x2616 <main+0xcfc>
    235a:	fe 01       	movw	r30, r28
    235c:	e3 5a       	subi	r30, 0xA3	; 163
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	a0 ef       	ldi	r26, 0xF0	; 240
    2366:	b1 e4       	ldi	r27, 0x41	; 65
    2368:	80 83       	st	Z, r24
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	a2 83       	std	Z+2, r26	; 0x02
    236e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2370:	8e 01       	movw	r16, r28
    2372:	07 5a       	subi	r16, 0xA7	; 167
    2374:	1f 4f       	sbci	r17, 0xFF	; 255
    2376:	fe 01       	movw	r30, r28
    2378:	e3 5a       	subi	r30, 0xA3	; 163
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	60 81       	ld	r22, Z
    237e:	71 81       	ldd	r23, Z+1	; 0x01
    2380:	82 81       	ldd	r24, Z+2	; 0x02
    2382:	93 81       	ldd	r25, Z+3	; 0x03
    2384:	2b ea       	ldi	r18, 0xAB	; 171
    2386:	3a ea       	ldi	r19, 0xAA	; 170
    2388:	4a ea       	ldi	r20, 0xAA	; 170
    238a:	50 e4       	ldi	r21, 0x40	; 64
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	f8 01       	movw	r30, r16
    2396:	80 83       	st	Z, r24
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	a2 83       	std	Z+2, r26	; 0x02
    239c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    239e:	fe 01       	movw	r30, r28
    23a0:	e7 5a       	subi	r30, 0xA7	; 167
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	60 81       	ld	r22, Z
    23a6:	71 81       	ldd	r23, Z+1	; 0x01
    23a8:	82 81       	ldd	r24, Z+2	; 0x02
    23aa:	93 81       	ldd	r25, Z+3	; 0x03
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e8       	ldi	r20, 0x80	; 128
    23b2:	5f e3       	ldi	r21, 0x3F	; 63
    23b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b8:	88 23       	and	r24, r24
    23ba:	34 f4       	brge	.+12     	; 0x23c8 <main+0xaae>
		__ticks = 1;
    23bc:	fe 01       	movw	r30, r28
    23be:	e8 5a       	subi	r30, 0xA8	; 168
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	80 83       	st	Z, r24
    23c6:	e0 c0       	rjmp	.+448    	; 0x2588 <main+0xc6e>
	else if (__tmp > 255)
    23c8:	fe 01       	movw	r30, r28
    23ca:	e7 5a       	subi	r30, 0xA7	; 167
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	4f e7       	ldi	r20, 0x7F	; 127
    23dc:	53 e4       	ldi	r21, 0x43	; 67
    23de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23e2:	18 16       	cp	r1, r24
    23e4:	0c f0       	brlt	.+2      	; 0x23e8 <main+0xace>
    23e6:	c0 c0       	rjmp	.+384    	; 0x2568 <main+0xc4e>
	{
		_delay_ms(__us / 1000.0);
    23e8:	fe 01       	movw	r30, r28
    23ea:	e3 5a       	subi	r30, 0xA3	; 163
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	4a e7       	ldi	r20, 0x7A	; 122
    23fc:	54 e4       	ldi	r21, 0x44	; 68
    23fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	fe 01       	movw	r30, r28
    2408:	ec 5a       	subi	r30, 0xAC	; 172
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 83       	st	Z, r24
    240e:	91 83       	std	Z+1, r25	; 0x01
    2410:	a2 83       	std	Z+2, r26	; 0x02
    2412:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2414:	8e 01       	movw	r16, r28
    2416:	00 5b       	subi	r16, 0xB0	; 176
    2418:	1f 4f       	sbci	r17, 0xFF	; 255
    241a:	fe 01       	movw	r30, r28
    241c:	ec 5a       	subi	r30, 0xAC	; 172
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	60 81       	ld	r22, Z
    2422:	71 81       	ldd	r23, Z+1	; 0x01
    2424:	82 81       	ldd	r24, Z+2	; 0x02
    2426:	93 81       	ldd	r25, Z+3	; 0x03
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	4a e7       	ldi	r20, 0x7A	; 122
    242e:	55 e4       	ldi	r21, 0x45	; 69
    2430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	f8 01       	movw	r30, r16
    243a:	80 83       	st	Z, r24
    243c:	91 83       	std	Z+1, r25	; 0x01
    243e:	a2 83       	std	Z+2, r26	; 0x02
    2440:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2442:	fe 01       	movw	r30, r28
    2444:	e0 5b       	subi	r30, 0xB0	; 176
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	60 81       	ld	r22, Z
    244a:	71 81       	ldd	r23, Z+1	; 0x01
    244c:	82 81       	ldd	r24, Z+2	; 0x02
    244e:	93 81       	ldd	r25, Z+3	; 0x03
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e8       	ldi	r20, 0x80	; 128
    2456:	5f e3       	ldi	r21, 0x3F	; 63
    2458:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    245c:	88 23       	and	r24, r24
    245e:	44 f4       	brge	.+16     	; 0x2470 <main+0xb56>
		__ticks = 1;
    2460:	fe 01       	movw	r30, r28
    2462:	e2 5b       	subi	r30, 0xB2	; 178
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	80 83       	st	Z, r24
    246e:	64 c0       	rjmp	.+200    	; 0x2538 <main+0xc1e>
	else if (__tmp > 65535)
    2470:	fe 01       	movw	r30, r28
    2472:	e0 5b       	subi	r30, 0xB0	; 176
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	60 81       	ld	r22, Z
    2478:	71 81       	ldd	r23, Z+1	; 0x01
    247a:	82 81       	ldd	r24, Z+2	; 0x02
    247c:	93 81       	ldd	r25, Z+3	; 0x03
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	3f ef       	ldi	r19, 0xFF	; 255
    2482:	4f e7       	ldi	r20, 0x7F	; 127
    2484:	57 e4       	ldi	r21, 0x47	; 71
    2486:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    248a:	18 16       	cp	r1, r24
    248c:	0c f0       	brlt	.+2      	; 0x2490 <main+0xb76>
    248e:	43 c0       	rjmp	.+134    	; 0x2516 <main+0xbfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2490:	fe 01       	movw	r30, r28
    2492:	ec 5a       	subi	r30, 0xAC	; 172
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	60 81       	ld	r22, Z
    2498:	71 81       	ldd	r23, Z+1	; 0x01
    249a:	82 81       	ldd	r24, Z+2	; 0x02
    249c:	93 81       	ldd	r25, Z+3	; 0x03
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e2       	ldi	r20, 0x20	; 32
    24a4:	51 e4       	ldi	r21, 0x41	; 65
    24a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	8e 01       	movw	r16, r28
    24b0:	02 5b       	subi	r16, 0xB2	; 178
    24b2:	1f 4f       	sbci	r17, 0xFF	; 255
    24b4:	bc 01       	movw	r22, r24
    24b6:	cd 01       	movw	r24, r26
    24b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	f8 01       	movw	r30, r16
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	80 83       	st	Z, r24
    24c6:	1f c0       	rjmp	.+62     	; 0x2506 <main+0xbec>
    24c8:	fe 01       	movw	r30, r28
    24ca:	e4 5b       	subi	r30, 0xB4	; 180
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 e9       	ldi	r24, 0x90	; 144
    24d0:	91 e0       	ldi	r25, 0x01	; 1
    24d2:	91 83       	std	Z+1, r25	; 0x01
    24d4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24d6:	fe 01       	movw	r30, r28
    24d8:	e4 5b       	subi	r30, 0xB4	; 180
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 81       	ld	r24, Z
    24de:	91 81       	ldd	r25, Z+1	; 0x01
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <main+0xbc6>
    24e4:	fe 01       	movw	r30, r28
    24e6:	e4 5b       	subi	r30, 0xB4	; 180
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	91 83       	std	Z+1, r25	; 0x01
    24ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ee:	de 01       	movw	r26, r28
    24f0:	a2 5b       	subi	r26, 0xB2	; 178
    24f2:	bf 4f       	sbci	r27, 0xFF	; 255
    24f4:	fe 01       	movw	r30, r28
    24f6:	e2 5b       	subi	r30, 0xB2	; 178
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	91 81       	ldd	r25, Z+1	; 0x01
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	11 96       	adiw	r26, 0x01	; 1
    2502:	9c 93       	st	X, r25
    2504:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2506:	fe 01       	movw	r30, r28
    2508:	e2 5b       	subi	r30, 0xB2	; 178
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	80 81       	ld	r24, Z
    250e:	91 81       	ldd	r25, Z+1	; 0x01
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	d1 f6       	brne	.-76     	; 0x24c8 <main+0xbae>
    2514:	4b c0       	rjmp	.+150    	; 0x25ac <main+0xc92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2516:	8e 01       	movw	r16, r28
    2518:	02 5b       	subi	r16, 0xB2	; 178
    251a:	1f 4f       	sbci	r17, 0xFF	; 255
    251c:	fe 01       	movw	r30, r28
    251e:	e0 5b       	subi	r30, 0xB0	; 176
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	f8 01       	movw	r30, r16
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	80 83       	st	Z, r24
    2538:	de 01       	movw	r26, r28
    253a:	a6 5b       	subi	r26, 0xB6	; 182
    253c:	bf 4f       	sbci	r27, 0xFF	; 255
    253e:	fe 01       	movw	r30, r28
    2540:	e2 5b       	subi	r30, 0xB2	; 178
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	11 96       	adiw	r26, 0x01	; 1
    254a:	9c 93       	st	X, r25
    254c:	8e 93       	st	-X, r24
    254e:	fe 01       	movw	r30, r28
    2550:	e6 5b       	subi	r30, 0xB6	; 182
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	80 81       	ld	r24, Z
    2556:	91 81       	ldd	r25, Z+1	; 0x01
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <main+0xc3e>
    255c:	fe 01       	movw	r30, r28
    255e:	e6 5b       	subi	r30, 0xB6	; 182
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	80 83       	st	Z, r24
    2566:	22 c0       	rjmp	.+68     	; 0x25ac <main+0xc92>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2568:	8e 01       	movw	r16, r28
    256a:	08 5a       	subi	r16, 0xA8	; 168
    256c:	1f 4f       	sbci	r17, 0xFF	; 255
    256e:	fe 01       	movw	r30, r28
    2570:	e7 5a       	subi	r30, 0xA7	; 167
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	60 81       	ld	r22, Z
    2576:	71 81       	ldd	r23, Z+1	; 0x01
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	93 81       	ldd	r25, Z+3	; 0x03
    257c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	f8 01       	movw	r30, r16
    2586:	80 83       	st	Z, r24
    2588:	de 01       	movw	r26, r28
    258a:	a7 5b       	subi	r26, 0xB7	; 183
    258c:	bf 4f       	sbci	r27, 0xFF	; 255
    258e:	fe 01       	movw	r30, r28
    2590:	e8 5a       	subi	r30, 0xA8	; 168
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2598:	fe 01       	movw	r30, r28
    259a:	e7 5b       	subi	r30, 0xB7	; 183
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 81       	ld	r24, Z
    25a0:	8a 95       	dec	r24
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <main+0xc86>
    25a4:	fe 01       	movw	r30, r28
    25a6:	e7 5b       	subi	r30, 0xB7	; 183
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	80 83       	st	Z, r24
		{
			_delay_us(30);
			if(BIT_IS_CLEAR(PINB, PB3) && paused)
    25ac:	e6 e3       	ldi	r30, 0x36	; 54
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	88 2f       	mov	r24, r24
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	88 70       	andi	r24, 0x08	; 8
    25b8:	90 70       	andi	r25, 0x00	; 0
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	71 f5       	brne	.+92     	; 0x261a <main+0xd00>
    25be:	80 91 73 00 	lds	r24, 0x0073
    25c2:	88 23       	and	r24, r24
    25c4:	51 f1       	breq	.+84     	; 0x261a <main+0xd00>
			{
				if(minutes_decrement_button == 0)
    25c6:	80 91 77 00 	lds	r24, 0x0077
    25ca:	88 23       	and	r24, r24
    25cc:	31 f5       	brne	.+76     	; 0x261a <main+0xd00>
				{
					/*make sure time is greater or equal one minute
					 * 60
					 */
					if(time >= 60)
    25ce:	80 91 68 00 	lds	r24, 0x0068
    25d2:	90 91 69 00 	lds	r25, 0x0069
    25d6:	a0 91 6a 00 	lds	r26, 0x006A
    25da:	b0 91 6b 00 	lds	r27, 0x006B
    25de:	8c 33       	cpi	r24, 0x3C	; 60
    25e0:	91 05       	cpc	r25, r1
    25e2:	a1 05       	cpc	r26, r1
    25e4:	b1 05       	cpc	r27, r1
    25e6:	98 f0       	brcs	.+38     	; 0x260e <main+0xcf4>
					{
						time = time - 60;
    25e8:	80 91 68 00 	lds	r24, 0x0068
    25ec:	90 91 69 00 	lds	r25, 0x0069
    25f0:	a0 91 6a 00 	lds	r26, 0x006A
    25f4:	b0 91 6b 00 	lds	r27, 0x006B
    25f8:	cc 97       	sbiw	r24, 0x3c	; 60
    25fa:	a1 09       	sbc	r26, r1
    25fc:	b1 09       	sbc	r27, r1
    25fe:	80 93 68 00 	sts	0x0068, r24
    2602:	90 93 69 00 	sts	0x0069, r25
    2606:	a0 93 6a 00 	sts	0x006A, r26
    260a:	b0 93 6b 00 	sts	0x006B, r27
					}
					minutes_decrement_button = 1;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	80 93 77 00 	sts	0x0077, r24
    2614:	02 c0       	rjmp	.+4      	; 0x261a <main+0xd00>
				}
			}
		}
		else
		{
			minutes_decrement_button = 0;
    2616:	10 92 77 00 	sts	0x0077, r1
		}

		/*if minutes increment button is pressed*/
		/*pressed -> PB0 in PINB = 4*/
		if(BIT_IS_CLEAR(PINB, PB4))
    261a:	e6 e3       	ldi	r30, 0x36	; 54
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	88 2f       	mov	r24, r24
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	80 71       	andi	r24, 0x10	; 16
    2626:	90 70       	andi	r25, 0x00	; 0
    2628:	00 97       	sbiw	r24, 0x00	; 0
    262a:	09 f0       	breq	.+2      	; 0x262e <main+0xd14>
    262c:	15 c1       	rjmp	.+554    	; 0x2858 <main+0xf3e>
    262e:	fe 01       	movw	r30, r28
    2630:	eb 5b       	subi	r30, 0xBB	; 187
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	a0 ef       	ldi	r26, 0xF0	; 240
    263a:	b1 e4       	ldi	r27, 0x41	; 65
    263c:	80 83       	st	Z, r24
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	a2 83       	std	Z+2, r26	; 0x02
    2642:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2644:	8e 01       	movw	r16, r28
    2646:	0f 5b       	subi	r16, 0xBF	; 191
    2648:	1f 4f       	sbci	r17, 0xFF	; 255
    264a:	fe 01       	movw	r30, r28
    264c:	eb 5b       	subi	r30, 0xBB	; 187
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	60 81       	ld	r22, Z
    2652:	71 81       	ldd	r23, Z+1	; 0x01
    2654:	82 81       	ldd	r24, Z+2	; 0x02
    2656:	93 81       	ldd	r25, Z+3	; 0x03
    2658:	2b ea       	ldi	r18, 0xAB	; 171
    265a:	3a ea       	ldi	r19, 0xAA	; 170
    265c:	4a ea       	ldi	r20, 0xAA	; 170
    265e:	50 e4       	ldi	r21, 0x40	; 64
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	f8 01       	movw	r30, r16
    266a:	80 83       	st	Z, r24
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	a2 83       	std	Z+2, r26	; 0x02
    2670:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2672:	fe 01       	movw	r30, r28
    2674:	ef 5b       	subi	r30, 0xBF	; 191
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	93 81       	ldd	r25, Z+3	; 0x03
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e8       	ldi	r20, 0x80	; 128
    2686:	5f e3       	ldi	r21, 0x3F	; 63
    2688:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    268c:	88 23       	and	r24, r24
    268e:	34 f4       	brge	.+12     	; 0x269c <main+0xd82>
		__ticks = 1;
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	fe 01       	movw	r30, r28
    2694:	e0 5c       	subi	r30, 0xC0	; 192
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	80 83       	st	Z, r24
    269a:	9d c0       	rjmp	.+314    	; 0x27d6 <main+0xebc>
	else if (__tmp > 255)
    269c:	fe 01       	movw	r30, r28
    269e:	ef 5b       	subi	r30, 0xBF	; 191
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	60 81       	ld	r22, Z
    26a4:	71 81       	ldd	r23, Z+1	; 0x01
    26a6:	82 81       	ldd	r24, Z+2	; 0x02
    26a8:	93 81       	ldd	r25, Z+3	; 0x03
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	4f e7       	ldi	r20, 0x7F	; 127
    26b0:	53 e4       	ldi	r21, 0x43	; 67
    26b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26b6:	18 16       	cp	r1, r24
    26b8:	0c f0       	brlt	.+2      	; 0x26bc <main+0xda2>
    26ba:	7e c0       	rjmp	.+252    	; 0x27b8 <main+0xe9e>
	{
		_delay_ms(__us / 1000.0);
    26bc:	fe 01       	movw	r30, r28
    26be:	eb 5b       	subi	r30, 0xBB	; 187
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	60 81       	ld	r22, Z
    26c4:	71 81       	ldd	r23, Z+1	; 0x01
    26c6:	82 81       	ldd	r24, Z+2	; 0x02
    26c8:	93 81       	ldd	r25, Z+3	; 0x03
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a e7       	ldi	r20, 0x7A	; 122
    26d0:	54 e4       	ldi	r21, 0x44	; 68
    26d2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	8c af       	std	Y+60, r24	; 0x3c
    26dc:	9d af       	std	Y+61, r25	; 0x3d
    26de:	ae af       	std	Y+62, r26	; 0x3e
    26e0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e2:	6c ad       	ldd	r22, Y+60	; 0x3c
    26e4:	7d ad       	ldd	r23, Y+61	; 0x3d
    26e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    26e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	4a e7       	ldi	r20, 0x7A	; 122
    26f0:	55 e4       	ldi	r21, 0x45	; 69
    26f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	88 af       	std	Y+56, r24	; 0x38
    26fc:	99 af       	std	Y+57, r25	; 0x39
    26fe:	aa af       	std	Y+58, r26	; 0x3a
    2700:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2702:	68 ad       	ldd	r22, Y+56	; 0x38
    2704:	79 ad       	ldd	r23, Y+57	; 0x39
    2706:	8a ad       	ldd	r24, Y+58	; 0x3a
    2708:	9b ad       	ldd	r25, Y+59	; 0x3b
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e8       	ldi	r20, 0x80	; 128
    2710:	5f e3       	ldi	r21, 0x3F	; 63
    2712:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2716:	88 23       	and	r24, r24
    2718:	2c f4       	brge	.+10     	; 0x2724 <main+0xe0a>
		__ticks = 1;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9f ab       	std	Y+55, r25	; 0x37
    2720:	8e ab       	std	Y+54, r24	; 0x36
    2722:	3f c0       	rjmp	.+126    	; 0x27a2 <main+0xe88>
	else if (__tmp > 65535)
    2724:	68 ad       	ldd	r22, Y+56	; 0x38
    2726:	79 ad       	ldd	r23, Y+57	; 0x39
    2728:	8a ad       	ldd	r24, Y+58	; 0x3a
    272a:	9b ad       	ldd	r25, Y+59	; 0x3b
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	3f ef       	ldi	r19, 0xFF	; 255
    2730:	4f e7       	ldi	r20, 0x7F	; 127
    2732:	57 e4       	ldi	r21, 0x47	; 71
    2734:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2738:	18 16       	cp	r1, r24
    273a:	4c f5       	brge	.+82     	; 0x278e <main+0xe74>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273c:	6c ad       	ldd	r22, Y+60	; 0x3c
    273e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2740:	8e ad       	ldd	r24, Y+62	; 0x3e
    2742:	9f ad       	ldd	r25, Y+63	; 0x3f
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e2       	ldi	r20, 0x20	; 32
    274a:	51 e4       	ldi	r21, 0x41	; 65
    274c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	bc 01       	movw	r22, r24
    2756:	cd 01       	movw	r24, r26
    2758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	9f ab       	std	Y+55, r25	; 0x37
    2762:	8e ab       	std	Y+54, r24	; 0x36
    2764:	0f c0       	rjmp	.+30     	; 0x2784 <main+0xe6a>
    2766:	80 e9       	ldi	r24, 0x90	; 144
    2768:	91 e0       	ldi	r25, 0x01	; 1
    276a:	9d ab       	std	Y+53, r25	; 0x35
    276c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    276e:	8c a9       	ldd	r24, Y+52	; 0x34
    2770:	9d a9       	ldd	r25, Y+53	; 0x35
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	f1 f7       	brne	.-4      	; 0x2772 <main+0xe58>
    2776:	9d ab       	std	Y+53, r25	; 0x35
    2778:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277a:	8e a9       	ldd	r24, Y+54	; 0x36
    277c:	9f a9       	ldd	r25, Y+55	; 0x37
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	9f ab       	std	Y+55, r25	; 0x37
    2782:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2784:	8e a9       	ldd	r24, Y+54	; 0x36
    2786:	9f a9       	ldd	r25, Y+55	; 0x37
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	69 f7       	brne	.-38     	; 0x2766 <main+0xe4c>
    278c:	2d c0       	rjmp	.+90     	; 0x27e8 <main+0xece>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278e:	68 ad       	ldd	r22, Y+56	; 0x38
    2790:	79 ad       	ldd	r23, Y+57	; 0x39
    2792:	8a ad       	ldd	r24, Y+58	; 0x3a
    2794:	9b ad       	ldd	r25, Y+59	; 0x3b
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9f ab       	std	Y+55, r25	; 0x37
    27a0:	8e ab       	std	Y+54, r24	; 0x36
    27a2:	8e a9       	ldd	r24, Y+54	; 0x36
    27a4:	9f a9       	ldd	r25, Y+55	; 0x37
    27a6:	9b ab       	std	Y+51, r25	; 0x33
    27a8:	8a ab       	std	Y+50, r24	; 0x32
    27aa:	8a a9       	ldd	r24, Y+50	; 0x32
    27ac:	9b a9       	ldd	r25, Y+51	; 0x33
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <main+0xe94>
    27b2:	9b ab       	std	Y+51, r25	; 0x33
    27b4:	8a ab       	std	Y+50, r24	; 0x32
    27b6:	18 c0       	rjmp	.+48     	; 0x27e8 <main+0xece>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27b8:	fe 01       	movw	r30, r28
    27ba:	ef 5b       	subi	r30, 0xBF	; 191
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	60 81       	ld	r22, Z
    27c0:	71 81       	ldd	r23, Z+1	; 0x01
    27c2:	82 81       	ldd	r24, Z+2	; 0x02
    27c4:	93 81       	ldd	r25, Z+3	; 0x03
    27c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	fe 01       	movw	r30, r28
    27d0:	e0 5c       	subi	r30, 0xC0	; 192
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 83       	st	Z, r24
    27d6:	fe 01       	movw	r30, r28
    27d8:	e0 5c       	subi	r30, 0xC0	; 192
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27e0:	89 a9       	ldd	r24, Y+49	; 0x31
    27e2:	8a 95       	dec	r24
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <main+0xec8>
    27e6:	89 ab       	std	Y+49, r24	; 0x31
		{
			_delay_us(30);
			if(BIT_IS_CLEAR(PINB, PB4) && paused)
    27e8:	e6 e3       	ldi	r30, 0x36	; 54
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	88 2f       	mov	r24, r24
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	80 71       	andi	r24, 0x10	; 16
    27f4:	90 70       	andi	r25, 0x00	; 0
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	89 f5       	brne	.+98     	; 0x285c <main+0xf42>
    27fa:	80 91 73 00 	lds	r24, 0x0073
    27fe:	88 23       	and	r24, r24
    2800:	69 f1       	breq	.+90     	; 0x285c <main+0xf42>
			{
				if(minutes_increment_button == 0)
    2802:	80 91 78 00 	lds	r24, 0x0078
    2806:	88 23       	and	r24, r24
    2808:	49 f5       	brne	.+82     	; 0x285c <main+0xf42>
				{
					/*make sure time has room for one more minute
					 * 99 * 60 * 60 + 60 * 59 = 359940
					 */
					if(time < 359940)
    280a:	80 91 68 00 	lds	r24, 0x0068
    280e:	90 91 69 00 	lds	r25, 0x0069
    2812:	a0 91 6a 00 	lds	r26, 0x006A
    2816:	b0 91 6b 00 	lds	r27, 0x006B
    281a:	84 30       	cpi	r24, 0x04	; 4
    281c:	fe e7       	ldi	r31, 0x7E	; 126
    281e:	9f 07       	cpc	r25, r31
    2820:	f5 e0       	ldi	r31, 0x05	; 5
    2822:	af 07       	cpc	r26, r31
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	bf 07       	cpc	r27, r31
    2828:	98 f4       	brcc	.+38     	; 0x2850 <main+0xf36>
					{
						time = time + 60;
    282a:	80 91 68 00 	lds	r24, 0x0068
    282e:	90 91 69 00 	lds	r25, 0x0069
    2832:	a0 91 6a 00 	lds	r26, 0x006A
    2836:	b0 91 6b 00 	lds	r27, 0x006B
    283a:	cc 96       	adiw	r24, 0x3c	; 60
    283c:	a1 1d       	adc	r26, r1
    283e:	b1 1d       	adc	r27, r1
    2840:	80 93 68 00 	sts	0x0068, r24
    2844:	90 93 69 00 	sts	0x0069, r25
    2848:	a0 93 6a 00 	sts	0x006A, r26
    284c:	b0 93 6b 00 	sts	0x006B, r27
					}

					minutes_increment_button = 1;
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	80 93 78 00 	sts	0x0078, r24
    2856:	02 c0       	rjmp	.+4      	; 0x285c <main+0xf42>
				}
			}
		}
		else
		{
			minutes_increment_button = 0;
    2858:	10 92 78 00 	sts	0x0078, r1
		}

		/*if seconds decrement button is pressed*/
		/*pressed -> PB5 in PINB = 0*/
		if(BIT_IS_CLEAR(PINB, PB5))
    285c:	e6 e3       	ldi	r30, 0x36	; 54
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	88 2f       	mov	r24, r24
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	80 72       	andi	r24, 0x20	; 32
    2868:	90 70       	andi	r25, 0x00	; 0
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	09 f0       	breq	.+2      	; 0x2870 <main+0xf56>
    286e:	f2 c0       	rjmp	.+484    	; 0x2a54 <main+0x113a>
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	a0 ef       	ldi	r26, 0xF0	; 240
    2876:	b1 e4       	ldi	r27, 0x41	; 65
    2878:	8d a7       	std	Y+45, r24	; 0x2d
    287a:	9e a7       	std	Y+46, r25	; 0x2e
    287c:	af a7       	std	Y+47, r26	; 0x2f
    287e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2880:	6d a5       	ldd	r22, Y+45	; 0x2d
    2882:	7e a5       	ldd	r23, Y+46	; 0x2e
    2884:	8f a5       	ldd	r24, Y+47	; 0x2f
    2886:	98 a9       	ldd	r25, Y+48	; 0x30
    2888:	2b ea       	ldi	r18, 0xAB	; 171
    288a:	3a ea       	ldi	r19, 0xAA	; 170
    288c:	4a ea       	ldi	r20, 0xAA	; 170
    288e:	50 e4       	ldi	r21, 0x40	; 64
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	89 a7       	std	Y+41, r24	; 0x29
    289a:	9a a7       	std	Y+42, r25	; 0x2a
    289c:	ab a7       	std	Y+43, r26	; 0x2b
    289e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    28a0:	69 a5       	ldd	r22, Y+41	; 0x29
    28a2:	7a a5       	ldd	r23, Y+42	; 0x2a
    28a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    28a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e8       	ldi	r20, 0x80	; 128
    28ae:	5f e3       	ldi	r21, 0x3F	; 63
    28b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b4:	88 23       	and	r24, r24
    28b6:	1c f4       	brge	.+6      	; 0x28be <main+0xfa4>
		__ticks = 1;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	88 a7       	std	Y+40, r24	; 0x28
    28bc:	91 c0       	rjmp	.+290    	; 0x29e0 <main+0x10c6>
	else if (__tmp > 255)
    28be:	69 a5       	ldd	r22, Y+41	; 0x29
    28c0:	7a a5       	ldd	r23, Y+42	; 0x2a
    28c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    28c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	4f e7       	ldi	r20, 0x7F	; 127
    28cc:	53 e4       	ldi	r21, 0x43	; 67
    28ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d2:	18 16       	cp	r1, r24
    28d4:	0c f0       	brlt	.+2      	; 0x28d8 <main+0xfbe>
    28d6:	7b c0       	rjmp	.+246    	; 0x29ce <main+0x10b4>
	{
		_delay_ms(__us / 1000.0);
    28d8:	6d a5       	ldd	r22, Y+45	; 0x2d
    28da:	7e a5       	ldd	r23, Y+46	; 0x2e
    28dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    28de:	98 a9       	ldd	r25, Y+48	; 0x30
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	4a e7       	ldi	r20, 0x7A	; 122
    28e6:	54 e4       	ldi	r21, 0x44	; 68
    28e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	8c a3       	std	Y+36, r24	; 0x24
    28f2:	9d a3       	std	Y+37, r25	; 0x25
    28f4:	ae a3       	std	Y+38, r26	; 0x26
    28f6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f8:	6c a1       	ldd	r22, Y+36	; 0x24
    28fa:	7d a1       	ldd	r23, Y+37	; 0x25
    28fc:	8e a1       	ldd	r24, Y+38	; 0x26
    28fe:	9f a1       	ldd	r25, Y+39	; 0x27
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	4a e7       	ldi	r20, 0x7A	; 122
    2906:	55 e4       	ldi	r21, 0x45	; 69
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	88 a3       	std	Y+32, r24	; 0x20
    2912:	99 a3       	std	Y+33, r25	; 0x21
    2914:	aa a3       	std	Y+34, r26	; 0x22
    2916:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2918:	68 a1       	ldd	r22, Y+32	; 0x20
    291a:	79 a1       	ldd	r23, Y+33	; 0x21
    291c:	8a a1       	ldd	r24, Y+34	; 0x22
    291e:	9b a1       	ldd	r25, Y+35	; 0x23
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    292c:	88 23       	and	r24, r24
    292e:	2c f4       	brge	.+10     	; 0x293a <main+0x1020>
		__ticks = 1;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9f 8f       	std	Y+31, r25	; 0x1f
    2936:	8e 8f       	std	Y+30, r24	; 0x1e
    2938:	3f c0       	rjmp	.+126    	; 0x29b8 <main+0x109e>
	else if (__tmp > 65535)
    293a:	68 a1       	ldd	r22, Y+32	; 0x20
    293c:	79 a1       	ldd	r23, Y+33	; 0x21
    293e:	8a a1       	ldd	r24, Y+34	; 0x22
    2940:	9b a1       	ldd	r25, Y+35	; 0x23
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	3f ef       	ldi	r19, 0xFF	; 255
    2946:	4f e7       	ldi	r20, 0x7F	; 127
    2948:	57 e4       	ldi	r21, 0x47	; 71
    294a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    294e:	18 16       	cp	r1, r24
    2950:	4c f5       	brge	.+82     	; 0x29a4 <main+0x108a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2952:	6c a1       	ldd	r22, Y+36	; 0x24
    2954:	7d a1       	ldd	r23, Y+37	; 0x25
    2956:	8e a1       	ldd	r24, Y+38	; 0x26
    2958:	9f a1       	ldd	r25, Y+39	; 0x27
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e2       	ldi	r20, 0x20	; 32
    2960:	51 e4       	ldi	r21, 0x41	; 65
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9f 8f       	std	Y+31, r25	; 0x1f
    2978:	8e 8f       	std	Y+30, r24	; 0x1e
    297a:	0f c0       	rjmp	.+30     	; 0x299a <main+0x1080>
    297c:	80 e9       	ldi	r24, 0x90	; 144
    297e:	91 e0       	ldi	r25, 0x01	; 1
    2980:	9d 8f       	std	Y+29, r25	; 0x1d
    2982:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2984:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2986:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <main+0x106e>
    298c:	9d 8f       	std	Y+29, r25	; 0x1d
    298e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2990:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2992:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	9f 8f       	std	Y+31, r25	; 0x1f
    2998:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    299c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	69 f7       	brne	.-38     	; 0x297c <main+0x1062>
    29a2:	24 c0       	rjmp	.+72     	; 0x29ec <main+0x10d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a4:	68 a1       	ldd	r22, Y+32	; 0x20
    29a6:	79 a1       	ldd	r23, Y+33	; 0x21
    29a8:	8a a1       	ldd	r24, Y+34	; 0x22
    29aa:	9b a1       	ldd	r25, Y+35	; 0x23
    29ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	9f 8f       	std	Y+31, r25	; 0x1f
    29b6:	8e 8f       	std	Y+30, r24	; 0x1e
    29b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    29bc:	9b 8f       	std	Y+27, r25	; 0x1b
    29be:	8a 8f       	std	Y+26, r24	; 0x1a
    29c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29c2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <main+0x10aa>
    29c8:	9b 8f       	std	Y+27, r25	; 0x1b
    29ca:	8a 8f       	std	Y+26, r24	; 0x1a
    29cc:	0f c0       	rjmp	.+30     	; 0x29ec <main+0x10d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29ce:	69 a5       	ldd	r22, Y+41	; 0x29
    29d0:	7a a5       	ldd	r23, Y+42	; 0x2a
    29d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    29d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    29d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	88 a7       	std	Y+40, r24	; 0x28
    29e0:	88 a5       	ldd	r24, Y+40	; 0x28
    29e2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29e4:	89 8d       	ldd	r24, Y+25	; 0x19
    29e6:	8a 95       	dec	r24
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <main+0x10cc>
    29ea:	89 8f       	std	Y+25, r24	; 0x19
		{
			_delay_us(30);
			if(BIT_IS_CLEAR(PINB, PB5) && paused)
    29ec:	e6 e3       	ldi	r30, 0x36	; 54
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	88 2f       	mov	r24, r24
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	80 72       	andi	r24, 0x20	; 32
    29f8:	90 70       	andi	r25, 0x00	; 0
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	69 f5       	brne	.+90     	; 0x2a58 <main+0x113e>
    29fe:	80 91 73 00 	lds	r24, 0x0073
    2a02:	88 23       	and	r24, r24
    2a04:	49 f1       	breq	.+82     	; 0x2a58 <main+0x113e>
			{
				if(seconds_decrement_button == 0)
    2a06:	80 91 79 00 	lds	r24, 0x0079
    2a0a:	88 23       	and	r24, r24
    2a0c:	29 f5       	brne	.+74     	; 0x2a58 <main+0x113e>
				{
					/*make sure time is greater than 0*/
					if(time > 0)
    2a0e:	80 91 68 00 	lds	r24, 0x0068
    2a12:	90 91 69 00 	lds	r25, 0x0069
    2a16:	a0 91 6a 00 	lds	r26, 0x006A
    2a1a:	b0 91 6b 00 	lds	r27, 0x006B
    2a1e:	00 97       	sbiw	r24, 0x00	; 0
    2a20:	a1 05       	cpc	r26, r1
    2a22:	b1 05       	cpc	r27, r1
    2a24:	99 f0       	breq	.+38     	; 0x2a4c <main+0x1132>
					{
						time--;
    2a26:	80 91 68 00 	lds	r24, 0x0068
    2a2a:	90 91 69 00 	lds	r25, 0x0069
    2a2e:	a0 91 6a 00 	lds	r26, 0x006A
    2a32:	b0 91 6b 00 	lds	r27, 0x006B
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	a1 09       	sbc	r26, r1
    2a3a:	b1 09       	sbc	r27, r1
    2a3c:	80 93 68 00 	sts	0x0068, r24
    2a40:	90 93 69 00 	sts	0x0069, r25
    2a44:	a0 93 6a 00 	sts	0x006A, r26
    2a48:	b0 93 6b 00 	sts	0x006B, r27
					}
					seconds_decrement_button = 1;
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	80 93 79 00 	sts	0x0079, r24
    2a52:	02 c0       	rjmp	.+4      	; 0x2a58 <main+0x113e>
				}
			}
		}
		else
		{
			seconds_decrement_button = 0;
    2a54:	10 92 79 00 	sts	0x0079, r1
		}

		/*if seconds increment button is pressed*/
		/*pressed -> PB6 in PINB = 0*/
		if(BIT_IS_CLEAR(PINB, PB6))
    2a58:	e6 e3       	ldi	r30, 0x36	; 54
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	88 2f       	mov	r24, r24
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	80 74       	andi	r24, 0x40	; 64
    2a64:	90 70       	andi	r25, 0x00	; 0
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	09 f0       	breq	.+2      	; 0x2a6c <main+0x1152>
    2a6a:	f6 c0       	rjmp	.+492    	; 0x2c58 <main+0x133e>
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	a0 ef       	ldi	r26, 0xF0	; 240
    2a72:	b1 e4       	ldi	r27, 0x41	; 65
    2a74:	8d 8b       	std	Y+21, r24	; 0x15
    2a76:	9e 8b       	std	Y+22, r25	; 0x16
    2a78:	af 8b       	std	Y+23, r26	; 0x17
    2a7a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a80:	8f 89       	ldd	r24, Y+23	; 0x17
    2a82:	98 8d       	ldd	r25, Y+24	; 0x18
    2a84:	2b ea       	ldi	r18, 0xAB	; 171
    2a86:	3a ea       	ldi	r19, 0xAA	; 170
    2a88:	4a ea       	ldi	r20, 0xAA	; 170
    2a8a:	50 e4       	ldi	r21, 0x40	; 64
    2a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	89 8b       	std	Y+17, r24	; 0x11
    2a96:	9a 8b       	std	Y+18, r25	; 0x12
    2a98:	ab 8b       	std	Y+19, r26	; 0x13
    2a9a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a9c:	69 89       	ldd	r22, Y+17	; 0x11
    2a9e:	7a 89       	ldd	r23, Y+18	; 0x12
    2aa0:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa2:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e8       	ldi	r20, 0x80	; 128
    2aaa:	5f e3       	ldi	r21, 0x3F	; 63
    2aac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ab0:	88 23       	and	r24, r24
    2ab2:	1c f4       	brge	.+6      	; 0x2aba <main+0x11a0>
		__ticks = 1;
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	88 8b       	std	Y+16, r24	; 0x10
    2ab8:	91 c0       	rjmp	.+290    	; 0x2bdc <main+0x12c2>
	else if (__tmp > 255)
    2aba:	69 89       	ldd	r22, Y+17	; 0x11
    2abc:	7a 89       	ldd	r23, Y+18	; 0x12
    2abe:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	4f e7       	ldi	r20, 0x7F	; 127
    2ac8:	53 e4       	ldi	r21, 0x43	; 67
    2aca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ace:	18 16       	cp	r1, r24
    2ad0:	0c f0       	brlt	.+2      	; 0x2ad4 <main+0x11ba>
    2ad2:	7b c0       	rjmp	.+246    	; 0x2bca <main+0x12b0>
	{
		_delay_ms(__us / 1000.0);
    2ad4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad8:	8f 89       	ldd	r24, Y+23	; 0x17
    2ada:	98 8d       	ldd	r25, Y+24	; 0x18
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	4a e7       	ldi	r20, 0x7A	; 122
    2ae2:	54 e4       	ldi	r21, 0x44	; 68
    2ae4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	8c 87       	std	Y+12, r24	; 0x0c
    2aee:	9d 87       	std	Y+13, r25	; 0x0d
    2af0:	ae 87       	std	Y+14, r26	; 0x0e
    2af2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af4:	6c 85       	ldd	r22, Y+12	; 0x0c
    2af6:	7d 85       	ldd	r23, Y+13	; 0x0d
    2af8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2afa:	9f 85       	ldd	r25, Y+15	; 0x0f
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	4a e7       	ldi	r20, 0x7A	; 122
    2b02:	55 e4       	ldi	r21, 0x45	; 69
    2b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	88 87       	std	Y+8, r24	; 0x08
    2b0e:	99 87       	std	Y+9, r25	; 0x09
    2b10:	aa 87       	std	Y+10, r26	; 0x0a
    2b12:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b14:	68 85       	ldd	r22, Y+8	; 0x08
    2b16:	79 85       	ldd	r23, Y+9	; 0x09
    2b18:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	40 e8       	ldi	r20, 0x80	; 128
    2b22:	5f e3       	ldi	r21, 0x3F	; 63
    2b24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b28:	88 23       	and	r24, r24
    2b2a:	2c f4       	brge	.+10     	; 0x2b36 <main+0x121c>
		__ticks = 1;
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	9f 83       	std	Y+7, r25	; 0x07
    2b32:	8e 83       	std	Y+6, r24	; 0x06
    2b34:	3f c0       	rjmp	.+126    	; 0x2bb4 <main+0x129a>
	else if (__tmp > 65535)
    2b36:	68 85       	ldd	r22, Y+8	; 0x08
    2b38:	79 85       	ldd	r23, Y+9	; 0x09
    2b3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	3f ef       	ldi	r19, 0xFF	; 255
    2b42:	4f e7       	ldi	r20, 0x7F	; 127
    2b44:	57 e4       	ldi	r21, 0x47	; 71
    2b46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b4a:	18 16       	cp	r1, r24
    2b4c:	4c f5       	brge	.+82     	; 0x2ba0 <main+0x1286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b50:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b52:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b54:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	40 e2       	ldi	r20, 0x20	; 32
    2b5c:	51 e4       	ldi	r21, 0x41	; 65
    2b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	bc 01       	movw	r22, r24
    2b68:	cd 01       	movw	r24, r26
    2b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	9f 83       	std	Y+7, r25	; 0x07
    2b74:	8e 83       	std	Y+6, r24	; 0x06
    2b76:	0f c0       	rjmp	.+30     	; 0x2b96 <main+0x127c>
    2b78:	80 e9       	ldi	r24, 0x90	; 144
    2b7a:	91 e0       	ldi	r25, 0x01	; 1
    2b7c:	9d 83       	std	Y+5, r25	; 0x05
    2b7e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b80:	8c 81       	ldd	r24, Y+4	; 0x04
    2b82:	9d 81       	ldd	r25, Y+5	; 0x05
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	f1 f7       	brne	.-4      	; 0x2b84 <main+0x126a>
    2b88:	9d 83       	std	Y+5, r25	; 0x05
    2b8a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b8e:	9f 81       	ldd	r25, Y+7	; 0x07
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	9f 83       	std	Y+7, r25	; 0x07
    2b94:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b96:	8e 81       	ldd	r24, Y+6	; 0x06
    2b98:	9f 81       	ldd	r25, Y+7	; 0x07
    2b9a:	00 97       	sbiw	r24, 0x00	; 0
    2b9c:	69 f7       	brne	.-38     	; 0x2b78 <main+0x125e>
    2b9e:	24 c0       	rjmp	.+72     	; 0x2be8 <main+0x12ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba0:	68 85       	ldd	r22, Y+8	; 0x08
    2ba2:	79 85       	ldd	r23, Y+9	; 0x09
    2ba4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ba6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	9f 83       	std	Y+7, r25	; 0x07
    2bb2:	8e 83       	std	Y+6, r24	; 0x06
    2bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb8:	9b 83       	std	Y+3, r25	; 0x03
    2bba:	8a 83       	std	Y+2, r24	; 0x02
    2bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc0:	01 97       	sbiw	r24, 0x01	; 1
    2bc2:	f1 f7       	brne	.-4      	; 0x2bc0 <main+0x12a6>
    2bc4:	9b 83       	std	Y+3, r25	; 0x03
    2bc6:	8a 83       	std	Y+2, r24	; 0x02
    2bc8:	0f c0       	rjmp	.+30     	; 0x2be8 <main+0x12ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bca:	69 89       	ldd	r22, Y+17	; 0x11
    2bcc:	7a 89       	ldd	r23, Y+18	; 0x12
    2bce:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	88 8b       	std	Y+16, r24	; 0x10
    2bdc:	88 89       	ldd	r24, Y+16	; 0x10
    2bde:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	8a 95       	dec	r24
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <main+0x12c8>
    2be6:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_us(30);
			if(BIT_IS_CLEAR(PINB, PB6) && paused)
    2be8:	e6 e3       	ldi	r30, 0x36	; 54
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	88 2f       	mov	r24, r24
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	80 74       	andi	r24, 0x40	; 64
    2bf4:	90 70       	andi	r25, 0x00	; 0
    2bf6:	00 97       	sbiw	r24, 0x00	; 0
    2bf8:	89 f5       	brne	.+98     	; 0x2c5c <main+0x1342>
    2bfa:	80 91 73 00 	lds	r24, 0x0073
    2bfe:	88 23       	and	r24, r24
    2c00:	69 f1       	breq	.+90     	; 0x2c5c <main+0x1342>
			{
				if(seconds_increment_button == 0)
    2c02:	80 91 7a 00 	lds	r24, 0x007A
    2c06:	88 23       	and	r24, r24
    2c08:	49 f5       	brne	.+82     	; 0x2c5c <main+0x1342>
				{
					/*make sure time has room for one more second
					 * 99 * 60 * 60 + 60 * 59 + 59 = 359999
					 */
					if(time < 359999)
    2c0a:	80 91 68 00 	lds	r24, 0x0068
    2c0e:	90 91 69 00 	lds	r25, 0x0069
    2c12:	a0 91 6a 00 	lds	r26, 0x006A
    2c16:	b0 91 6b 00 	lds	r27, 0x006B
    2c1a:	8f 33       	cpi	r24, 0x3F	; 63
    2c1c:	2e e7       	ldi	r18, 0x7E	; 126
    2c1e:	92 07       	cpc	r25, r18
    2c20:	25 e0       	ldi	r18, 0x05	; 5
    2c22:	a2 07       	cpc	r26, r18
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	b2 07       	cpc	r27, r18
    2c28:	98 f4       	brcc	.+38     	; 0x2c50 <main+0x1336>
					{
						time++;
    2c2a:	80 91 68 00 	lds	r24, 0x0068
    2c2e:	90 91 69 00 	lds	r25, 0x0069
    2c32:	a0 91 6a 00 	lds	r26, 0x006A
    2c36:	b0 91 6b 00 	lds	r27, 0x006B
    2c3a:	01 96       	adiw	r24, 0x01	; 1
    2c3c:	a1 1d       	adc	r26, r1
    2c3e:	b1 1d       	adc	r27, r1
    2c40:	80 93 68 00 	sts	0x0068, r24
    2c44:	90 93 69 00 	sts	0x0069, r25
    2c48:	a0 93 6a 00 	sts	0x006A, r26
    2c4c:	b0 93 6b 00 	sts	0x006B, r27
					}

					seconds_increment_button = 1;
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	80 93 7a 00 	sts	0x007A, r24
    2c56:	02 c0       	rjmp	.+4      	; 0x2c5c <main+0x1342>
				}
			}
		}
		else
		{
			seconds_increment_button = 0;
    2c58:	10 92 7a 00 	sts	0x007A, r1
		}

		if(mode_toggle && time == 0)
    2c5c:	80 91 72 00 	lds	r24, 0x0072
    2c60:	88 23       	and	r24, r24
    2c62:	51 f1       	breq	.+84     	; 0x2cb8 <main+0x139e>
    2c64:	80 91 68 00 	lds	r24, 0x0068
    2c68:	90 91 69 00 	lds	r25, 0x0069
    2c6c:	a0 91 6a 00 	lds	r26, 0x006A
    2c70:	b0 91 6b 00 	lds	r27, 0x006B
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	a1 05       	cpc	r26, r1
    2c78:	b1 05       	cpc	r27, r1
    2c7a:	f1 f4       	brne	.+60     	; 0x2cb8 <main+0x139e>
		{
			/*stopwatch stop
			 *count down reached 0
			 */
			/*stop timer 1 (no clock source)*/
			CLEAR_BIT(TCCR1B, CS10);
    2c7c:	ae e4       	ldi	r26, 0x4E	; 78
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	ee e4       	ldi	r30, 0x4E	; 78
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	8e 7f       	andi	r24, 0xFE	; 254
    2c88:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, CS11);
    2c8a:	ae e4       	ldi	r26, 0x4E	; 78
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	ee e4       	ldi	r30, 0x4E	; 78
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	8d 7f       	andi	r24, 0xFD	; 253
    2c96:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, CS12);
    2c98:	ae e4       	ldi	r26, 0x4E	; 78
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	ee e4       	ldi	r30, 0x4E	; 78
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8b 7f       	andi	r24, 0xFB	; 251
    2ca4:	8c 93       	st	X, r24

			/*buzzer on*/
			SET_BIT(PORTD, PD0);
    2ca6:	a2 e3       	ldi	r26, 0x32	; 50
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	e2 e3       	ldi	r30, 0x32	; 50
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	80 81       	ld	r24, Z
    2cb0:	81 60       	ori	r24, 0x01	; 1
    2cb2:	8c 93       	st	X, r24
    2cb4:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <main+0x17e>
		}
		else
		{
			/*buzzer off*/
			CLEAR_BIT(PORTD, PD0);
    2cb8:	a2 e3       	ldi	r26, 0x32	; 50
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e2 e3       	ldi	r30, 0x32	; 50
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	8e 7f       	andi	r24, 0xFE	; 254
    2cc4:	8c 93       	st	X, r24
    2cc6:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <main+0x17e>

00002cca <__mulsi3>:
    2cca:	62 9f       	mul	r22, r18
    2ccc:	d0 01       	movw	r26, r0
    2cce:	73 9f       	mul	r23, r19
    2cd0:	f0 01       	movw	r30, r0
    2cd2:	82 9f       	mul	r24, r18
    2cd4:	e0 0d       	add	r30, r0
    2cd6:	f1 1d       	adc	r31, r1
    2cd8:	64 9f       	mul	r22, r20
    2cda:	e0 0d       	add	r30, r0
    2cdc:	f1 1d       	adc	r31, r1
    2cde:	92 9f       	mul	r25, r18
    2ce0:	f0 0d       	add	r31, r0
    2ce2:	83 9f       	mul	r24, r19
    2ce4:	f0 0d       	add	r31, r0
    2ce6:	74 9f       	mul	r23, r20
    2ce8:	f0 0d       	add	r31, r0
    2cea:	65 9f       	mul	r22, r21
    2cec:	f0 0d       	add	r31, r0
    2cee:	99 27       	eor	r25, r25
    2cf0:	72 9f       	mul	r23, r18
    2cf2:	b0 0d       	add	r27, r0
    2cf4:	e1 1d       	adc	r30, r1
    2cf6:	f9 1f       	adc	r31, r25
    2cf8:	63 9f       	mul	r22, r19
    2cfa:	b0 0d       	add	r27, r0
    2cfc:	e1 1d       	adc	r30, r1
    2cfe:	f9 1f       	adc	r31, r25
    2d00:	bd 01       	movw	r22, r26
    2d02:	cf 01       	movw	r24, r30
    2d04:	11 24       	eor	r1, r1
    2d06:	08 95       	ret

00002d08 <__udivmodsi4>:
    2d08:	a1 e2       	ldi	r26, 0x21	; 33
    2d0a:	1a 2e       	mov	r1, r26
    2d0c:	aa 1b       	sub	r26, r26
    2d0e:	bb 1b       	sub	r27, r27
    2d10:	fd 01       	movw	r30, r26
    2d12:	0d c0       	rjmp	.+26     	; 0x2d2e <__udivmodsi4_ep>

00002d14 <__udivmodsi4_loop>:
    2d14:	aa 1f       	adc	r26, r26
    2d16:	bb 1f       	adc	r27, r27
    2d18:	ee 1f       	adc	r30, r30
    2d1a:	ff 1f       	adc	r31, r31
    2d1c:	a2 17       	cp	r26, r18
    2d1e:	b3 07       	cpc	r27, r19
    2d20:	e4 07       	cpc	r30, r20
    2d22:	f5 07       	cpc	r31, r21
    2d24:	20 f0       	brcs	.+8      	; 0x2d2e <__udivmodsi4_ep>
    2d26:	a2 1b       	sub	r26, r18
    2d28:	b3 0b       	sbc	r27, r19
    2d2a:	e4 0b       	sbc	r30, r20
    2d2c:	f5 0b       	sbc	r31, r21

00002d2e <__udivmodsi4_ep>:
    2d2e:	66 1f       	adc	r22, r22
    2d30:	77 1f       	adc	r23, r23
    2d32:	88 1f       	adc	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	1a 94       	dec	r1
    2d38:	69 f7       	brne	.-38     	; 0x2d14 <__udivmodsi4_loop>
    2d3a:	60 95       	com	r22
    2d3c:	70 95       	com	r23
    2d3e:	80 95       	com	r24
    2d40:	90 95       	com	r25
    2d42:	9b 01       	movw	r18, r22
    2d44:	ac 01       	movw	r20, r24
    2d46:	bd 01       	movw	r22, r26
    2d48:	cf 01       	movw	r24, r30
    2d4a:	08 95       	ret

00002d4c <__prologue_saves__>:
    2d4c:	2f 92       	push	r2
    2d4e:	3f 92       	push	r3
    2d50:	4f 92       	push	r4
    2d52:	5f 92       	push	r5
    2d54:	6f 92       	push	r6
    2d56:	7f 92       	push	r7
    2d58:	8f 92       	push	r8
    2d5a:	9f 92       	push	r9
    2d5c:	af 92       	push	r10
    2d5e:	bf 92       	push	r11
    2d60:	cf 92       	push	r12
    2d62:	df 92       	push	r13
    2d64:	ef 92       	push	r14
    2d66:	ff 92       	push	r15
    2d68:	0f 93       	push	r16
    2d6a:	1f 93       	push	r17
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	ca 1b       	sub	r28, r26
    2d76:	db 0b       	sbc	r29, r27
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	09 94       	ijmp

00002d84 <__epilogue_restores__>:
    2d84:	2a 88       	ldd	r2, Y+18	; 0x12
    2d86:	39 88       	ldd	r3, Y+17	; 0x11
    2d88:	48 88       	ldd	r4, Y+16	; 0x10
    2d8a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d8c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d8e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d90:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d92:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d94:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d96:	b9 84       	ldd	r11, Y+9	; 0x09
    2d98:	c8 84       	ldd	r12, Y+8	; 0x08
    2d9a:	df 80       	ldd	r13, Y+7	; 0x07
    2d9c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d9e:	fd 80       	ldd	r15, Y+5	; 0x05
    2da0:	0c 81       	ldd	r16, Y+4	; 0x04
    2da2:	1b 81       	ldd	r17, Y+3	; 0x03
    2da4:	aa 81       	ldd	r26, Y+2	; 0x02
    2da6:	b9 81       	ldd	r27, Y+1	; 0x01
    2da8:	ce 0f       	add	r28, r30
    2daa:	d1 1d       	adc	r29, r1
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	f8 94       	cli
    2db0:	de bf       	out	0x3e, r29	; 62
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	cd bf       	out	0x3d, r28	; 61
    2db6:	ed 01       	movw	r28, r26
    2db8:	08 95       	ret

00002dba <_exit>:
    2dba:	f8 94       	cli

00002dbc <__stop_program>:
    2dbc:	ff cf       	rjmp	.-2      	; 0x2dbc <__stop_program>
